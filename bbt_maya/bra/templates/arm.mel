//finding the module
string $module="";
for($i in `ls -type network`)
{
    if((`getAttr ($i+".type")`=="module") && (`attributeQuery -node $i -exists "system"`) && (`getAttr ($i+".system")`=="template") && (`getAttr ($i+".component")`=="arm"))
    {
        $module=$i;
    }
}

//finding the joints
string $clavicle;
string $shoulder;
string $elbow;
string $wrist;
string $upperTwist;
string $lowerTwist;

for($i in `listConnections -type network ($module+".message")`)
{
    if((`getAttr ($i+".component")`=="clavicle"))
    {
        $clavicle=$i;
    }
    if((`getAttr ($i+".component")`=="shoulder"))
    {
        $shoulder=$i;
    }
    if((`getAttr ($i+".component")`=="elbow"))
    {
        $elbow=$i;
    }
    if((`getAttr ($i+".component")`=="wrist"))
    {
        $wrist=$i;
    }
    if((`getAttr ($i+".component")`=="uppertwistjoints"))
    {
        $upperTwist=$i;
    }
    if((`getAttr ($i+".component")`=="lowertwistjoints"))
    {
        $lowerTwist=$i;
    }
}

//getting position data
string $temp[]=`listConnections -type joint ($clavicle+".message")`;
$claviclePOS=`xform -worldSpace -query -translation $temp[0]`;

string $temp[]=`listConnections -type joint ($shoulder+".message")`;
$shoulderPOS=`xform -worldSpace -query -translation $temp[0]`;
string $temp[]=`listConnections -type joint ($elbow+".message")`;
$elbowPOS=`xform -worldSpace -query -translation $temp[0]`;

string $temp[]=`listConnections -type joint ($wrist+".message")`;
$wristPOS=`xform -worldSpace -query -translation $temp[0]`;
$wristROT=`xform -objectSpace -query -rotation $temp[0]`;

//getting twist counts
int $upperTwistCount=`getAttr ($upperTwist+".numberOfUpperTwistJoints")`;

int $lowerTwistCount=`getAttr ($lowerTwist+".numberOfLowerTwistJoints")`;

//establish side
string $side="c";

if($wristPOS[0] > 1.0)
{
    $side="l";
}
if($wristPOS[0] < -1.0)
{
    $side="r";
}

//establish index
int $index=`getAttr ($module+".index")`;
if(size(`ls -type network`)!=0)
{
    for($i in `ls -type network`)
    {
        if((`getAttr ($i+".type")`=="module") && (`attributeQuery -node $i -exists "index"`) && (`getAttr ($i+".component")`=="arm") && (`attributeQuery -node $i -exists "side"`) && (`getAttr ($i+".side")`==$side) && (`getAttr ($i+".index")`==$index))
        {
            $index=`getAttr ($i+".index")`+1;
        }
    }
}

//deleting module template
string $root="";
for($i in `listConnections ($module+".message")`)
{
    if((`attributeQuery -node $i -exists "component"`) && (`getAttr ($i+".component")`=="root"))
    {
        for($node in `listConnections ($i+".message")`)
        {
            if(`nodeType($node)`=="transform")
            {
                $root=$node;
            }
        }
    }
}

delete $root;

//establish prefix and suffix
string $prefix=($side+"_arm"+$index+"_");
string $suffix=("_"+$side+"_arm"+$index);

//create module
string $module=`shadingNode -asUtility -n ("meta"+$suffix) network`;

addAttr -ln "type" -dt "string" $module;
setAttr ($module+".type") -type "string" "module";
addAttr -ln "component" -dt "string" $module;
setAttr ($module+".component") -type "string" "arm";
addAttr -ln "metaParent" -at message $module;
addAttr -ln "index" -at long $module;
setAttr ($module+".index") $index;
addAttr -ln "side" -dt "string" $module;
setAttr ($module+".side") -type "string" $side;

// create arm jnts
string $clavicleJNT =`joint -p ($claviclePOS[0]) ($claviclePOS[1]) ($claviclePOS[2]) -n ($prefix+"jnt01")`;
string $shoulderJNT =`joint -p ($shoulderPOS[0]) ($shoulderPOS[1]) ($shoulderPOS[2]) -n ($prefix+"jnt02")`;
string $elbowBLD =`joint -p ($elbowPOS[0]) ($elbowPOS[1]) ($elbowPOS[2]) -n ($prefix+"jnt03")`;
string $wristBLD =`joint -p ($wristPOS[0]) ($wristPOS[1]) ($wristPOS[2]) -n ($prefix+"jnt04")`;
select -cl;
string $wristJNT =`joint -p ($wristPOS[0]) ($wristPOS[1]) ($wristPOS[2]) -o ($wristROT[0]) ($wristROT[1]) ($wristROT[2]) -n ($prefix+"jnt05")`;
select -cl;
string $elbowJNT =`joint -p ($elbowPOS[0]) ($elbowPOS[1]) ($elbowPOS[2]) -n ($prefix+"jnt06")`;

string $clavicleMETA=`shadingNode -asUtility -n ("meta_"+$clavicleJNT) network`;
addAttr -ln "type" -dt "string" $clavicleMETA;
setAttr ($clavicleMETA+".type") -type "string" "joint";
addAttr -ln "component" -dt "string" $clavicleMETA;
setAttr ($clavicleMETA+".component") -type "string" "clavicle";
addAttr -ln "system" -dt "string" $clavicleMETA;
setAttr ($clavicleMETA+".system") -type "string" "skin";
addAttr -ln "metaParent" -at message $clavicleMETA;
connectAttr -f ($module+".message") ($clavicleMETA+".metaParent");

string $wristMETA=`shadingNode -asUtility -n ("meta_"+$wristJNT) network`;
addAttr -ln "type" -dt "string" $wristMETA;
setAttr ($wristMETA+".type") -type "string" "joint";
addAttr -ln "component" -dt "string" $wristMETA;
setAttr ($wristMETA+".component") -type "string" "wrist";
addAttr -ln "system" -dt "string" $wristMETA;
setAttr ($wristMETA+".system") -type "string" "skin";
addAttr -ln "metaParent" -at message $wristMETA;
connectAttr -f ($module+".message") ($wristMETA+".metaParent");

addAttr -ln "metaParent" -at message $clavicleJNT;
connectAttr ($clavicleMETA+".message") ($clavicleJNT+".metaParent");
addAttr -ln "metaParent" -at message $wristJNT;
connectAttr ($wristMETA+".message") ($wristJNT+".metaParent");

//create plug
string $helper_loc[] = `spaceLocator -n ($prefix+"plug")`;
string $plug=$helper_loc[0];

delete `pointConstraint -offset 0 0 0 -weight 1 $clavicleJNT $plug`;
string $plugMETA=`shadingNode -asUtility -n ("meta_"+$plug) network`;
addAttr -ln "type" -dt "string" $plugMETA;
setAttr ($plugMETA+".type") -type "string" "plug";
addAttr -ln "component" -dt "string" $plugMETA;
setAttr ($plugMETA+".component") -type "string" "arm";
addAttr -ln "metaParent" -at message $plugMETA;
connectAttr -f ($module+".message") ($plugMETA+".metaParent");

addAttr -ln "metaParent" -at message $plug;
connectAttr -f ($plugMETA+".message") ($plug+".metaParent");

//create socket
string $helper_loc[] = `spaceLocator -n ($prefix+"socket")`;
string $socket=$helper_loc[0];

delete `parentConstraint -weight 1 $wristJNT $socket`;
parent $socket $wristJNT;

string $socketMETA=`shadingNode -asUtility -n ("meta_"+$socket) network`;
addAttr -ln "type" -dt "string" $socketMETA;
setAttr ($socketMETA+".type") -type "string" "socket";
addAttr -ln "component" -dt "string" $socketMETA;
setAttr ($socketMETA+".component") -type "string" "arm";
addAttr -ln "metaParent" -at message $socketMETA;
connectAttr -f ($module+".message") ($socketMETA+".metaParent");

addAttr -ln "metaParent" -at message $socket;
connectAttr -f ($socketMETA+".message") ($socket+".metaParent");

//setup clavicle jnt
string $helper_loc[] = `spaceLocator`;
delete `pointConstraint -offset 0 0 0 -weight 1 $clavicleJNT $helper_loc[0]`;
aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "scene" $shoulderJNT $helper_loc[0];
parent -w $shoulderJNT;
parent $clavicleJNT $helper_loc;

setAttr ($clavicleJNT+".jointOrientX") 0;
setAttr ($clavicleJNT+".jointOrientY") 0;
setAttr ($clavicleJNT+".jointOrientZ") 0;

parent -w $clavicleJNT;
parent $shoulderJNT $clavicleJNT;

delete $helper_loc;

//finding the worldUpVector for the arm jnts
float $vectorA[];
float $vectorB[];
float $cross[];

float $posA[] = `xform -q -ws -rp $shoulderJNT`;
float $posB[] = `xform -q -ws -rp $elbowBLD`;
float $posC[] = `xform -q -ws -rp $wristBLD`;

$vectorA[0] = $posA[0]-$posB[0];
$vectorA[1] = $posA[1]-$posB[1];
$vectorA[2] = $posA[2]-$posB[2];

$vectorB[0] = $posC[0]-$posB[0];
$vectorB[1] = $posC[1]-$posB[1];
$vectorB[2] = $posC[2]-$posB[2];

$cross = `crossProduct $vectorA $vectorB 1 1`;

//setup shoulder jnt
string $helper_loc[] = `spaceLocator`;
delete `pointConstraint -offset 0 0 0 -weight 1 $shoulderJNT $helper_loc[0]`;
aimConstraint -worldUpType "vector" -worldUpVector $cross[0] $cross[1] $cross[2] 
$elbowBLD $helper_loc[0];
parent -w $elbowBLD;
parent $shoulderJNT $helper_loc;

setAttr ($shoulderJNT+".jointOrientX") 0;
setAttr ($shoulderJNT+".jointOrientY") 0;
setAttr ($shoulderJNT+".jointOrientZ") 0;

parent $shoulderJNT $clavicleJNT;
parent $elbowBLD $shoulderJNT;

delete $helper_loc;

//adjust clavicle
parent -w $shoulderJNT;

delete `parentConstraint -skipTranslate x -skipTranslate y -skipTranslate z -skipRotate y -skipRotate z -weight 1 $shoulderJNT $clavicleJNT`;

parent $shoulderJNT $clavicleJNT;

//setup elbow jnt
string $helper_loc[] = `spaceLocator`;
delete `pointConstraint -offset 0 0 0 -weight 1 $elbowBLD $helper_loc[0]`;
aimConstraint -worldUpType "vector" 
-worldUpVector $cross[0] $cross[1] $cross[2] 
$wristBLD $helper_loc[0];
parent -w $wristBLD;
parent $elbowBLD $helper_loc;

setAttr ($elbowBLD+".jointOrientX") 0;
setAttr ($elbowBLD+".jointOrientY") 0;
setAttr ($elbowBLD+".jointOrientZ") 0;

parent $elbowBLD $shoulderJNT;
parent $wristBLD $elbowBLD;

delete $helper_loc;

//setup wrist bld
string $helper_loc[] = `spaceLocator`;
delete `pointConstraint -offset 0 0 0 -weight 1 $elbowBLD $helper_loc[0]`;

parent $wristBLD $helper_loc;

setAttr ($wristBLD+".jointOrientX") 0;
setAttr ($wristBLD+".jointOrientY") 0;
setAttr ($wristBLD+".jointOrientZ") 0;

parent $wristBLD $elbowBLD;

delete $helper_loc;

//setup wrist jnt
//delete `parentConstraint -skipTranslate x -skipTranslate y -skipTranslate z -skipRotate y -skipRotate z -weight 1 $elbowBLD $wristJNT`;

scaleConstraint -offset 1 1 1 -weight 1 $plug $wristJNT;

//create ik chain
string $helper_loc[]=`duplicate -st -po -n ($prefix+"ik01") $shoulderJNT`;
string $ikShoulder=$helper_loc[0];
string $helper_loc[]=`duplicate -st -po -n ($prefix+"ik02") $elbowBLD`;
string $ikElbow=$helper_loc[0];
string $helper_loc[]=`duplicate -st -po -n ($prefix+"ik03") $wristBLD`;
string $ikWrist=$helper_loc[0];

parent $ikElbow $ikShoulder;
parent $ikWrist $ikElbow;

connectAttr -f ($ikShoulder+".scale") ($ikElbow+".inverseScale");
connectAttr -f ($ikElbow+".scale") ($ikWrist+".inverseScale");

//create ik_poleVector
string $helper_loc[]=`spaceLocator`;
string $polevector=`rename $helper_loc[0] ($prefix+"polevector")`;
delete `pointConstraint -offset 0 0 0 -weight 1 $elbowBLD $polevector`;
delete `orientConstraint -offset 0 0 0 -weight 1 $elbowBLD $polevector`;
move -r -os -wd (-`getAttr ($elbowBLD+".tx")`) 0 (-(`getAttr ($elbowBLD+".tx")`)) $polevector;

//create ik_handle
string $helper_loc[]=`ikHandle -sj $ikShoulder -ee $ikWrist -sol ikRPsolver -n ($prefix+"ikHandle")`;
string $ikHandle=$helper_loc[0];

rename $helper_loc[1] ($prefix+"effector");

poleVectorConstraint -weight 1 $polevector $ikHandle;

//create fk chain
string $helper_loc[]=`duplicate -st -po -n ($prefix+"fk01") $shoulderJNT`;
string $fkShoulder=$helper_loc[0];
string $helper_loc[]=`duplicate -st -po -n ($prefix+"fk02") $elbowBLD`;
string $fkElbow=$helper_loc[0];
string $helper_loc[]=`duplicate -st -po -n ($prefix+"fk03") $wristBLD`;
string $fkWrist=$helper_loc[0];

delete `orientConstraint -offset 0 0 0 -weight 1 $wristJNT $fkWrist`;

parent $fkElbow $fkShoulder;
parent $fkWrist $fkElbow;

connectAttr -f ($fkShoulder+".scale") ($fkElbow+".inverseScale");
connectAttr -f ($fkElbow+".scale") ($fkWrist+".inverseScale");

//setup ik stretching
string $stretch01=`createNode "transform" -ss -n ($prefix+"stretch01")`;
string $stretch02=`createNode "transform" -ss -n ($prefix+"stretch02")`;
string $stretchDIST=`shadingNode -asUtility -n ($prefix+"stretchDIST") distanceBetween`;
string $stretch01MD=`shadingNode -asUtility -n ($prefix+"stretch01MD") multiplyDivide`;
string $stretch02MD=`shadingNode -asUtility -n ($prefix+"stretch02MD") multiplyDivide`;
string $stretchBLD=`shadingNode -asUtility -n ($prefix+"stretchBLD") blendColors`;

transformLimits -sx 1 1 -esx 1 0 $ikShoulder;
transformLimits -sx 1 1 -esx 1 0 $ikElbow;

$temp1=`getAttr ($elbowBLD+".tx")`;
$temp2=`getAttr ($wristBLD+".tx")`;

setAttr ($stretchBLD+".color2R") 1;

setAttr ($stretch02MD+".input2X") ($temp1+$temp2);

setAttr ($stretch01MD+".operation") 2;

pointConstraint -offset 0 0 0 -weight 1 $ikShoulder $stretch01;
delete `pointConstraint -offset 0 0 0 -weight 1 $wristJNT $stretch02`;

parent $ikHandle $stretch02;

connectAttr -f ($stretch01+".translate") ($stretchDIST+".point1");
connectAttr -f ($stretch02+".translate") ($stretchDIST+".point2");

connectAttr -f ($plug+".sx") ($stretch02MD+".input1X");

connectAttr -f ($stretchDIST+".distance") ($stretch01MD+".input1X");
connectAttr -f ($stretch02MD+".outputX") ($stretch01MD+".input2X");

connectAttr -f ($stretch01MD+".outputX") ($stretchBLD+".color1R");

connectAttr -f ($stretchBLD+".outputR") ($ikShoulder+".sx");
connectAttr -f ($stretchBLD+".outputR") ($ikElbow+".sx");

//create controls
string $polevectorCNT=`curve -d 1 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 -0.382683 0 -p -0.707107 -0.707107 0 -p -0.382683 -0.92388 0 -p 0 -1 0 -p 0.382683 -0.92388 0 -p 0.707107 -0.707107 0 -p 0.92388 -0.382683 0 -p 1 0 0 -p 0.92388 0.382683 0 -p 0.707107 0.707107 0 -p 0.382683 0.92388 0 -p 0 1 0 -p 0 0.92388 0.382683 -p 0 0.707107 0.707107 -p 0 0.382683 0.92388 -p 0 0 1 -p 0 -0.382683 0.92388 -p 0 -0.707107 0.707107 -p 0 -0.92388 0.382683 -p 0 -1 0 -p 0 -0.92388 -0.382683 -p 0 -0.707107 -0.707107 -p 0 -0.382683 -0.92388 -p 0 0 -1 -p 0 0.382683 -0.92388 -p 0 0.707107 -0.707107 -p 0 0.92388 -0.382683 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 0 0.382683 -p -0.707107 0 0.707107 -p -0.382683 0 0.92388 -p 0 0 1 -p 0.382683 0 0.92388 -p 0.707107 0 0.707107 -p 0.92388 0 0.382683 -p 1 0 0 -p 0.92388 0 -0.382683 -p 0.707107 0 -0.707107 -p 0.382683 0 -0.92388 -p 0 0 -1 -p -0.382683 0 -0.92388 -p -0.707107 0 -0.707107 -p -0.92388 0 -0.382683 -p -1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52 
-n ($prefix+"polevector_cnt")`;
string $ikWristCNT=`curve -d 1 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 -0.382683 0 -p -0.707107 -0.707107 0 -p -0.382683 -0.92388 0 -p 0 -1 0 -p 0.382683 -0.92388 0 -p 0.707107 -0.707107 0 -p 0.92388 -0.382683 0 -p 1 0 0 -p 0.92388 0.382683 0 -p 0.707107 0.707107 0 -p 0.382683 0.92388 0 -p 0 1 0 -p 0 0.92388 0.382683 -p 0 0.707107 0.707107 -p 0 0.382683 0.92388 -p 0 0 1 -p 0 -0.382683 0.92388 -p 0 -0.707107 0.707107 -p 0 -0.92388 0.382683 -p 0 -1 0 -p 0 -0.92388 -0.382683 -p 0 -0.707107 -0.707107 -p 0 -0.382683 -0.92388 -p 0 0 -1 -p 0 0.382683 -0.92388 -p 0 0.707107 -0.707107 -p 0 0.92388 -0.382683 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 0 0.382683 -p -0.707107 0 0.707107 -p -0.382683 0 0.92388 -p 0 0 1 -p 0.382683 0 0.92388 -p 0.707107 0 0.707107 -p 0.92388 0 0.382683 -p 1 0 0 -p 0.92388 0 -0.382683 -p 0.707107 0 -0.707107 -p 0.382683 0 -0.92388 -p 0 0 -1 -p -0.382683 0 -0.92388 -p -0.707107 0 -0.707107 -p -0.92388 0 -0.382683 -p -1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52 
-n ($prefix+"ikWrist_cnt")`;
string $fkShoulderCNT=`curve -d 1 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -k 0 -k 0.1 -k 0.2 -k 0.3 -k 0.4 -k 0.5 -k 0.6 -k 0.7 -k 0.8 -k 0.9 -k 1 -k 1.1 -k 1.2 -k 1.3 -k 1.4 -k 1.5 -k 1.6 -k 1.7 -k 1.8
-n ($prefix+"shoulder_cnt")`;
string $fkElbowCNT=`curve -d 1 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -k 0 -k 0.1 -k 0.2 -k 0.3 -k 0.4 -k 0.5 -k 0.6 -k 0.7 -k 0.8 -k 0.9 -k 1 -k 1.1 -k 1.2 -k 1.3 -k 1.4 -k 1.5 -k 1.6 -k 1.7 -k 1.8
-n ($prefix+"elbow_cnt")`;
string $fkWristCNT=`curve -d 1 -p 0.5 0.5 -0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 -0.5 -0.5 -p -0.5 -0.5 0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 -0.5 0.5 -p -0.5 -0.5 0.5 -p -0.5 -0.5 -0.5 -p 0.5 -0.5 -0.5 -p 0.5 0.5 -0.5 -p -0.5 0.5 -0.5 -p -0.5 0.5 0.5 -p 0.5 0.5 0.5 -p 0.5 0.5 -0.5 -k 0 -k 0.1 -k 0.2 -k 0.3 -k 0.4 -k 0.5 -k 0.6 -k 0.7 -k 0.8 -k 0.9 -k 1 -k 1.1 -k 1.2 -k 1.3 -k 1.4 -k 1.5 -k 1.6 -k 1.7 -k 1.8
-n ($prefix+"fkWrist_cnt")`;
string $clavicleCNT=`curve -d 1 -p 0 0 0 -p 0 1.2 0 -p -0.235114 1.276393 0 -p -0.380423 1.476393 0 -p -0.380423 1.723607 0 -p -0.235114 1.923607 0 -p 0 2 0 -p 0.235114 1.923607 0 -p 0.380423 1.723607 0 -p 0.380423 1.476393 0 -p 0.235114 1.276393 0 -p 0 1.2 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11
-n ($prefix+"clavicle_cnt")`;
string $extraCNT=`curve -d 1 -p 0 0 0 -p 0 1.2 0 -p -0.235114 1.276393 0 -p -0.380423 1.476393 0 -p -0.380423 1.723607 0 -p -0.235114 1.923607 0 -p 0 2 0 -p 0.235114 1.923607 0 -p 0.380423 1.723607 0 -p 0.380423 1.476393 0 -p 0.235114 1.276393 0 -p 0 1.2 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11
-n ($prefix+"extra_cnt")`;

string $extraMETA=`shadingNode -asUtility -n ("meta_"+$extraCNT) network`;

addAttr -ln "type" -dt "string" $extraMETA;
setAttr ($extraMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $extraMETA;
setAttr ($extraMETA+".component") -type "string" "extra";
addAttr -ln "metaParent" -at message $extraMETA;
connectAttr -f ($module+".message") ($extraMETA+".metaParent");
addAttr -ln "metaParent" -at message $extraCNT;
connectAttr -f ($extraMETA+".message") ($extraCNT+".metaParent");
addAttr -ln "FKIK" -at "float" -keyable true -min 0 -max 1 $extraCNT;
addAttr -ln "ikTwistControls" -at "float" -keyable true -min 0 -max 1 $extraCNT;
addAttr -ln "stretch" -at "float" -keyable true -min 0 -max 1 $extraCNT;
connectAttr -f ($extraCNT+".stretch") ($stretchBLD+".blender");

string $temp[]=`duplicate $extraMETA`;
string $polevectorMETA=`rename $temp[0] ("meta_"+$polevectorCNT)`;
setAttr ($polevectorMETA+".component") -type "string" "polevector";
connectAttr -f ($module+".message") ($polevectorMETA+".metaParent");
addAttr -ln "system" -dt "string" $polevectorMETA;
setAttr ($polevectorMETA+".system") -type "string" "ik";
addAttr -ln "metaParent" -at message $polevectorCNT;
connectAttr -f ($polevectorMETA+".message") ($polevectorCNT+".metaParent");
addAttr -ln "switch" -at message $polevectorMETA;
connectAttr -f ($fkElbow+".message") ($polevectorMETA+".switch");

string $temp[]=`duplicate $extraMETA`;
string $shoulderMETA=`rename $temp[0] ("meta_"+$fkShoulderCNT)`;
setAttr ($shoulderMETA+".component") -type "string" "shoulder";
connectAttr -f ($module+".message") ($shoulderMETA+".metaParent");
addAttr -ln "system" -dt "string" $shoulderMETA;
setAttr ($shoulderMETA+".system") -type "string" "fk";
addAttr -ln "metaParent" -at message $fkShoulderCNT;
connectAttr -f ($shoulderMETA+".message") ($fkShoulderCNT+".metaParent");
addAttr -ln "switch" -at message $shoulderMETA;
connectAttr -f ($ikShoulder+".message") ($shoulderMETA+".switch");
addAttr -ln "index" -at long $shoulderMETA;
setAttr ($shoulderMETA+".index") 1;

string $temp[]=`duplicate $extraMETA`;
string $elbowMETA=`rename $temp[0] ("meta_"+$fkElbowCNT)`;
setAttr ($elbowMETA+".component") -type "string" "elbow";
connectAttr -f ($module+".message") ($elbowMETA+".metaParent");
addAttr -ln "system" -dt "string" $elbowMETA;
setAttr ($elbowMETA+".system") -type "string" "fk";
addAttr -ln "metaParent" -at message $fkElbowCNT;
connectAttr -f ($elbowMETA+".message") ($fkElbowCNT+".metaParent");
addAttr -ln "switch" -at message $elbowMETA;
connectAttr -f ($ikElbow+".message") ($elbowMETA+".switch");
addAttr -ln "index" -at long $elbowMETA;
setAttr ($elbowMETA+".index") 2;

string $temp[]=`duplicate $extraMETA`;
string $fkWristMETA=`rename $temp[0] ("meta_"+$fkWristCNT)`;
setAttr ($fkWristMETA+".component") -type "string" "wrist";
connectAttr -f ($module+".message") ($fkWristMETA+".metaParent");
addAttr -ln "system" -dt "string" $fkWristMETA;
setAttr ($fkWristMETA+".system") -type "string" "fk";
addAttr -ln "metaParent" -at message $fkWristCNT;
connectAttr -f ($fkWristMETA+".message") ($fkWristCNT+".metaParent");
addAttr -ln "switch" -at message $fkWristMETA;
connectAttr -f ($stretch02+".message") ($fkWristMETA+".switch");
addAttr -ln "index" -at long $fkWristMETA;
setAttr ($fkWristMETA+".index") 3;

string $temp[]=`duplicate $extraMETA`;
string $ikWristMETA=`rename $temp[0] ("meta_"+$ikWristCNT)`;
setAttr ($ikWristMETA+".component") -type "string" "wrist";
connectAttr -f ($module+".message") ($ikWristMETA+".metaParent");
addAttr -ln "system" -dt "string" $ikWristMETA;
setAttr ($ikWristMETA+".system") -type "string" "ik";
addAttr -ln "metaParent" -at message $ikWristCNT;
connectAttr -f ($ikWristMETA+".message") ($ikWristCNT+".metaParent");
addAttr -ln "switch" -at message $ikWristMETA;
connectAttr -f ($fkWrist+".message") ($ikWristMETA+".switch");
addAttr -ln "index" -at long $ikWristMETA;
setAttr ($ikWristMETA+".index") 1;

string $temp[]=`duplicate $extraMETA`;
string $clavicleMETA=`rename $temp[0] ("meta_"+$clavicleCNT)`;
setAttr ($clavicleMETA+".component") -type "string" "clavicle";
connectAttr -f ($module+".message") ($clavicleMETA+".metaParent");
addAttr -ln "metaParent" -at message $clavicleCNT;
connectAttr -f ($clavicleMETA+".message") ($clavicleCNT+".metaParent");
string $polevectorGRP=`createNode "transform" -ss -n ($prefix+"polevectorGRP")`;
string $ikWristGRP=`createNode "transform" -ss -n ($prefix+"ikHandGRP")`;
string $shoulderGRP=`createNode "transform" -ss -n ($prefix+"shoulderGRP")`;
string $elbowGRP=`createNode "transform" -ss -n ($prefix+"elbowGRP")`;
string $fkWristGRP=`createNode "transform" -ss -n ($prefix+"fkHandGRP")`;
string $clavicleGRP=`createNode "transform" -ss -n ($prefix+"clavicleGRP")`;

parent $polevectorCNT $polevectorGRP;
parent $ikWristCNT $ikWristGRP;
parent $fkShoulderCNT $shoulderGRP;
parent $fkElbowCNT $elbowGRP;
parent $fkWristCNT $fkWristGRP;
parent $clavicleCNT $clavicleGRP;

delete `pointConstraint -offset 0 0 0 -weight 1 $polevector $polevectorGRP`;
delete `parentConstraint -weight 1 $wristJNT $ikWristGRP`;
delete `parentConstraint -weight 1 $shoulderJNT $shoulderGRP`;
delete `parentConstraint -weight 1 $elbowBLD $elbowGRP`;
delete `parentConstraint -weight 1 $wristJNT $fkWristGRP`;
delete `parentConstraint -weight 1 $clavicleJNT $clavicleGRP`;
delete `parentConstraint -weight 1 $wristJNT $extraCNT`;

parent $shoulderGRP $clavicleCNT;
parent $elbowGRP $fkShoulderCNT;
parent $fkWristGRP $fkElbowCNT;

select -r ($clavicleCNT+".cv[0:11]");
rotate -r -os 90 0 0;

select -r ($extraCNT+".cv[0:11]");
rotate -r -os -90 0 0;

select -r ($fkShoulderCNT+".cv[0:4]") ($fkShoulderCNT+".cv[9:10]") ($fkShoulderCNT+".cv[13:14]") ($fkShoulderCNT+".cv[17:18]");
move -r -os -wd -0.5 0 0;
move -r -os -wd `getAttr ($elbowBLD+".tx")` 0 0;
select -r ($fkShoulderCNT+".cv[5:8]") ($fkShoulderCNT+".cv[11:12]") ($fkShoulderCNT+".cv[15:16]");
move -r -os -wd 0.5 0 0;

select -r ($fkElbowCNT+".cv[0:4]") ($fkElbowCNT+".cv[9:10]") ($fkElbowCNT+".cv[13:14]") ($fkElbowCNT+".cv[17:18]");
move -r -os -wd -0.5 0 0;
move -r -os -wd `getAttr ($wristBLD+".tx")` 0 0;
select -r ($fkElbowCNT+".cv[5:8]") ($fkElbowCNT+".cv[11:12]") ($fkElbowCNT+".cv[15:16]");
move -r -os -wd 0.5 0 0;
select -cl;

//create twist controls
string $helper_loc[]=`duplicate -st -po -n ($prefix+"ikTwist01") $shoulderJNT`;
string $ikShoulderTwist=$helper_loc[0];

string $helper_loc[]=`circle -n ($prefix+"ikTwist01_cnt")`;
string $ikfkShoulderCNT=$helper_loc[0];

delete `parentConstraint -weight 1 $ikShoulder $ikfkShoulderCNT`;

parent $ikShoulderTwist $ikfkShoulderCNT;

rotate -r -os 0 -90 0 ($ikfkShoulderCNT+".cv[0:7]");
select $ikfkShoulderCNT;
DeleteHistory;
select -cl;

parent $ikfkShoulderCNT $ikShoulder;

string $helper_loc[]=`duplicate -st -po -n ($prefix+"ikTwist02") $elbowBLD`;
string $ikElbowTwist=$helper_loc[0];

string $helper_loc[]=`circle -n ($prefix+"ikTwist02_cnt")`;
string $ikfkElbowCNT=$helper_loc[0];

delete `parentConstraint -weight 1 $ikElbow $ikfkElbowCNT`;

parent $ikElbowTwist $ikfkElbowCNT;

rotate -r -os 0 -90 0 ($ikfkElbowCNT+".cv[0:7]");
select $ikfkElbowCNT;
DeleteHistory;
select -cl;

parent $ikfkElbowCNT $ikElbow;

//setup twist controls
string $ikShoulderMETA=`shadingNode -asUtility -n ("meta_"+$ikfkShoulderCNT) network`;

addAttr -ln "type" -dt "string" $ikShoulderMETA;
setAttr ($ikShoulderMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $ikShoulderMETA;
setAttr ($ikShoulderMETA+".component") -type "string" "iktwist";
addAttr -ln "metaParent" -at message $ikShoulderMETA;
connectAttr -f ($module+".message") ($ikShoulderMETA+".metaParent");
addAttr -ln "metaParent" -at message $ikfkShoulderCNT;
connectAttr -f ($ikShoulderMETA+".message") ($ikfkShoulderCNT+".metaParent");
addAttr -ln "switch" -at message $ikShoulderMETA;
connectAttr -f ($fkShoulder+".message") ($ikShoulderMETA+".switch");
addAttr -ln "system" -dt "string" $ikShoulderMETA;
setAttr ($ikShoulderMETA+".system") -type "string" "ik";
addAttr -ln "worldspace" -dt "string" $ikShoulderMETA;
setAttr ($ikShoulderMETA+".worldspace") -type "string" "false";
addAttr -ln "index" -at long $ikShoulderMETA;
setAttr ($ikShoulderMETA+".index") 1;

string $ikElbowMETA=`shadingNode -asUtility -n ("meta_"+$ikfkElbowCNT) network`;

addAttr -ln "type" -dt "string" $ikElbowMETA;
setAttr ($ikElbowMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $ikElbowMETA;
setAttr ($ikElbowMETA+".component") -type "string" "iktwist";
addAttr -ln "metaParent" -at message $ikElbowMETA;
connectAttr -f ($module+".message") ($ikElbowMETA+".metaParent");
addAttr -ln "metaParent" -at message $ikfkElbowCNT;
connectAttr -f ($ikElbowMETA+".message") ($ikfkElbowCNT+".metaParent");
addAttr -ln "switch" -at message $ikElbowMETA;
connectAttr -f ($fkElbow+".message") ($ikElbowMETA+".switch");
addAttr -ln "system" -dt "string" $ikElbowMETA;
setAttr ($ikElbowMETA+".system") -type "string" "ik";
addAttr -ln "worldspace" -dt "string" $ikElbowMETA;
setAttr ($ikElbowMETA+".worldspace") -type "string" "false";
addAttr -ln "index" -at long $ikElbowMETA;
setAttr ($ikElbowMETA+".index") 2;

//setup blending
string $fkikREV=`shadingNode -asUtility -n ($prefix+"fkikREV") reverse`;

connectAttr ($extraCNT+".FKIK") ($fkikREV+".inputX");

string $shoulderOrientCon[]=`orientConstraint -offset 0 0 0 -weight 1 $ikShoulderTwist $fkShoulder $shoulderJNT`;
string $elbowOrientCon[]=`orientConstraint -offset 0 0 0 -weight 1 $ikElbowTwist $fkElbow $elbowBLD`;
string $wristOrientCon[]=`orientConstraint -offset 0 0 0 -weight 1 $stretch02 $fkWrist $wristJNT`;
pointConstraint -offset 0 0 0 -weight 1 $wristBLD $wristJNT;
string $shoulderScaleCon[]=`scaleConstraint -offset 1 1 1 -weight 1 $ikShoulder $fkShoulder $shoulderJNT`;

setAttr ($shoulderOrientCon[0]+".interpType") 2;
setAttr ($elbowOrientCon[0]+".interpType") 2;
setAttr ($wristOrientCon[0]+".interpType") 2;

connectAttr -f ($fkikREV+".outputX") ($shoulderOrientCon[0]+"."+$fkShoulder+"W1");
connectAttr -f ($extraCNT+".FKIK") ($shoulderOrientCon[0]+"."+$ikShoulderTwist+"W0");

connectAttr -f ($fkikREV+".outputX") ($elbowOrientCon[0]+"."+$fkElbow+"W1");
connectAttr -f ($extraCNT+".FKIK") ($elbowOrientCon[0]+"."+$ikElbowTwist+"W0");

connectAttr -f ($fkikREV+".outputX") ($wristOrientCon[0]+"."+$fkWrist+"W1");
connectAttr -f ($extraCNT+".FKIK") ($wristOrientCon[0]+"."+$stretch02+"W0");
connectAttr -f ($fkikREV+".outputX") ($shoulderScaleCon[0]+"."+$fkShoulder+"W1");
connectAttr -f ($extraCNT+".FKIK") ($shoulderScaleCon[0]+"."+$ikShoulder+"W0");

connectAttr -f ($shoulderJNT+".sx") ($elbowBLD+".sx");

//setup controls
parent $clavicleGRP $plug;
parent $polevector $polevectorCNT;
parent $fkShoulder $fkShoulderCNT;
parent $fkElbow $fkElbowCNT;
parent $fkWrist $fkWristCNT;
parent $clavicleJNT $clavicleCNT;
parent $extraCNT $wristJNT;

parentConstraint -weight 1 $ikWristCNT $stretch02;

connectAttr -f ($fkikREV+".outputX") ($fkShoulderCNT+".visibility");
connectAttr -f ($fkikREV+".outputX") ($fkElbowCNT+".visibility");
connectAttr -f ($fkikREV+".outputX") ($fkWristCNT+".visibility");

connectAttr -f ($extraCNT+".FKIK") ($ikWristCNT+".visibility");
connectAttr -f ($extraCNT+".FKIK") ($polevectorCNT+".visibility");

connectAttr -f ($extraCNT+".ikTwistControls") ($ikfkShoulderCNT+".visibility");
connectAttr -f ($extraCNT+".ikTwistControls") ($ikfkElbowCNT+".visibility");

//channelbox cleanup
setAttr -lock true -keyable false -channelBox false ($polevectorCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($polevectorCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($polevectorCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($polevectorCNT+".v");

setAttr -lock true -keyable false -channelBox false ($ikWristCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($ikWristCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($ikWristCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($ikWristCNT+".v");

setAttr -lock true -keyable false -channelBox false ($fkShoulderCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($fkShoulderCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($fkShoulderCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($fkShoulderCNT+".tx");
setAttr -lock true -keyable false -channelBox false ($fkShoulderCNT+".ty");
setAttr -lock true -keyable false -channelBox false ($fkShoulderCNT+".tz");
setAttr -lock true -keyable false -channelBox false ($fkShoulderCNT+".v");

setAttr -lock true -keyable false -channelBox false ($fkElbowCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($fkElbowCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($fkElbowCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($fkElbowCNT+".tx");
setAttr -lock true -keyable false -channelBox false ($fkElbowCNT+".ty");
setAttr -lock true -keyable false -channelBox false ($fkElbowCNT+".tz");
setAttr -lock true -keyable false -channelBox false ($fkElbowCNT+".v");

setAttr -lock true -keyable false -channelBox false ($fkWristCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($fkWristCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($fkWristCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($fkWristCNT+".tx");
setAttr -lock true -keyable false -channelBox false ($fkWristCNT+".ty");
setAttr -lock true -keyable false -channelBox false ($fkWristCNT+".tz");
setAttr -lock true -keyable false -channelBox false ($fkWristCNT+".v");
setAttr -lock true -keyable false -channelBox false ($clavicleCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($clavicleCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($clavicleCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($clavicleCNT+".v");

setAttr -lock true -keyable false -channelBox false ($extraCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".tx");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".ty");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".tz");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".rx");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".ry");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".rz");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".v");

setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".tx");
setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".ty");
setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".tz");
setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".ry");
setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".rz");
setAttr -lock true -keyable false -channelBox false ($ikfkShoulderCNT+".v");

setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".tx");
setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".ty");
setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".tz");
setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".ry");
setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".rz");
setAttr -lock true -keyable false -channelBox false ($ikfkElbowCNT+".v");

//bendy/twist setup-------------------------------------------------------------
//create average jnt
$averageJNT=`joint -p $elbowPOS[0] $elbowPOS[1] $elbowPOS[2] -n ($prefix+"average_jnt")`;

parent $averageJNT $elbowBLD;

string $orientCon[]=`orientConstraint -weight 1 -offset 0 0 0 $shoulderJNT $elbowBLD $averageJNT`;

setAttr ($orientCon[0]+".interpType") 2;

//calculate length of upper arm
float $distX=$shoulderPOS[0]-$elbowPOS[0];
float $distY=$shoulderPOS[1]-$elbowPOS[1];
float $distZ=$shoulderPOS[2]-$elbowPOS[2];

float $upperLength=`mag <<$distX,$distY,$distZ>>`;

//calculate length of lower arm
float $distX=$elbowPOS[0]-$wristPOS[0];
float $distY=$elbowPOS[1]-$wristPOS[1];
float $distZ=$elbowPOS[2]-$wristPOS[2];

float $lowerLength=`mag <<$distX,$distY,$distZ>>`;

//adding control to extra cnt
addAttr -ln "bendy" -at "float" -min 0 -max 1 -k 1 $extraCNT;
setAttr ($extraCNT+".bendy") 0;

addAttr -ln "fineTuneControl" -at "float" -min 0 -max 1 -k 1 $extraCNT;

//create jnts
string $upperDRV[]={};
string $lowerDRV[]={};
select -cl;
for($o = 0; $o < ($upperTwistCount+1); $o++)
{
    $jnt=`joint -p (($upperLength/$upperTwistCount)*$o) 0 0 -n ($prefix+"upperTwist_drv"+$o)`;
    
    $upperDRV[size($upperDRV)]=$jnt;
}
select -cl;
for($o = 0; $o < ($lowerTwistCount+1); $o++)
{
    $jnt=`joint -p (($lowerLength/$lowerTwistCount)*$o) 0 0 -n ($prefix+"lowerTwist_drv"+$o)`;
    
    $lowerDRV[size($lowerDRV)]=$jnt;
}

//setup upper jnts
delete `parentConstraint -weight 1 $shoulderJNT $upperDRV[0]`;

string $upperIkHandle[]=`ikHandle -sol ikSplineSolver -createCurve 1 -sj $upperDRV[0] -endEffector $upperDRV[$upperTwistCount]`;

select -cl;
float $upperCurve01POS[]=`xform -q -ws -translation ($upperIkHandle[2]+".cv[1]")`;
string $upperBend01JNT=`joint -p $upperCurve01POS[0] $upperCurve01POS[1] $upperCurve01POS[2] -n ($prefix+"upperBend01_jnt")`;

select -cl;
float $upperCurve02POS[]=`xform -q -ws -translation ($upperIkHandle[2]+".cv[2]")`;
string $upperBend02JNT=`joint -p $upperCurve02POS[0] $upperCurve02POS[1] $upperCurve02POS[2] -n ($prefix+"upperBend02_jnt")`;

string $skin[]=`skinCluster -tsb $shoulderJNT $upperBend01JNT $upperBend02JNT $upperIkHandle[2]`;

skinPercent -tv $shoulderJNT 1 $skin[0] ($upperIkHandle[2]+".cv[0]");
skinPercent -tv $upperBend01JNT 1 $skin[0] ($upperIkHandle[2]+".cv[1]");
skinPercent -tv $upperBend02JNT 1 $skin[0] ($upperIkHandle[2]+".cv[2]");
skinPercent -tv $shoulderJNT 1 $skin[0] ($upperIkHandle[2]+".cv[3]");

delete `parentConstraint -weight 1 $averageJNT $upperBend01JNT`;
delete `parentConstraint -weight 1 $averageJNT $upperBend02JNT`;

string $upperBend01GRP=`createNode "transform" -ss -n ($prefix+"upperBend01_grp")`;
string $upperBend02GRP=`createNode "transform" -ss -n ($prefix+"upperBend02_grp")`;

delete `parentConstraint -weight 1 $averageJNT $upperBend01GRP`;
delete `parentConstraint -weight 1 $averageJNT $upperBend02GRP`;

parent $upperBend01JNT $upperBend01GRP;
parent $upperBend02JNT $upperBend02GRP;
parent $upperBend01GRP $averageJNT;
parent $upperBend02GRP $averageJNT;

orientConstraint -weight 1 -offset 0 0 0 $shoulderJNT $upperBend01GRP;

string $upperBend01MD=`shadingNode -asUtility -n ($prefix+"upperBend01_md") multiplyDivide`;
string $upperBend02MD=`shadingNode -asUtility -n ($prefix+"upperBend02_md") multiplyDivide`;
string $upperBend01PMS=`shadingNode -asUtility -n ($prefix+"upperBend01_pms") plusMinusAverage`;
setAttr ($upperBend01MD+".input2X") (-$upperLength);
setAttr ($upperBend02MD+".input1Y") ($upperLength/1000);
connectAttr -f ($upperBend02MD+".outputY") ($upperBend01PMS+".input1D[0]");
connectAttr -f ($extraCNT+".bendy") ($upperBend01PMS+".input1D[1]");
connectAttr -f ($upperBend01PMS+".output1D") ($upperBend01MD+".input1X");

connectAttr -f ($upperBend01MD+".outputX") ($upperBend01JNT+".tx");
connectAttr -f ($upperBend01MD+".outputX") ($upperBend02JNT+".tx");

setAttr ($upperIkHandle[0]+".dTwistControlEnable") 1;
setAttr ($upperIkHandle[0]+".dWorldUpType") 4;
connectAttr -f ($clavicleJNT+".worldMatrix[0]") ($upperIkHandle[0]+".dWorldUpMatrix");
connectAttr -f ($elbowBLD+".worldMatrix[0]") ($upperIkHandle[0]+".dWorldUpMatrixEnd");

//making twist jnts stretchy
string $upperBendStretch01MD=`shadingNode -asUtility -n ($prefix+"upperBendStretch01_md") multiplyDivide`;
setAttr ($upperBendStretch01MD+".operation") 2;
setAttr ($upperBendStretch01MD+".input2X") ($upperLength);

string $upperBendStretch02MD=`shadingNode -asUtility -n ($prefix+"upperBendStretch02_md") multiplyDivide`;
setAttr ($upperBendStretch02MD+".operation") 2;
connectAttr -f ($plug+".sx") ($upperBendStretch02MD+".input2X");

string $temp[]=`listRelatives -s $upperIkHandle[2]`;
string $temp01=`arclen -ch 1 $temp[0]`;
string $upperBendStretch01INFO=`rename $temp01 ($prefix+"upperBendStretch01_info")`;

connectAttr -f ($upperBendStretch01INFO+".arcLength") ($upperBendStretch01MD+".input1X");

connectAttr -f ($upperBendStretch01MD+".outputX") ($upperBendStretch02MD+".input1X");

for($o = 0; $o < ($upperTwistCount); $o++)
{
    connectAttr -f ($upperBendStretch02MD+".outputX") ($upperDRV[$o]+".sx");
}

parent $upperDRV[0] $shoulderJNT;

//rename curves and ikHandles
rename $upperIkHandle[0] ($prefix+"upperBend01_ikHandle");
rename $upperIkHandle[1] ($prefix+"upperBend01_eff");
rename $upperIkHandle[2] ($prefix+"upperBend01_crv");

//create bend controls
for($o = 0; $o < ($upperTwistCount); $o++)
{
    select -cl;
    string $jnt=`joint -p 0 0 0 -n ($prefix+"upperTwist_jnt"+$o)`;
    string $cnt[]=`circle -ch 0 -n ($prefix+"upperTwist_cnt"+$o)`;
    
    parent $jnt $cnt[0];
    
    rotate -r -os 0 -90 0 ($cnt[0]+".cv[0:7]");
    
    delete `parentConstraint -weight 1 $upperDRV[$o] $cnt[0]`;
    
    parent $cnt $upperDRV[$o];
    
    connectAttr -f ($extraCNT+".fineTuneControl") ($cnt[0]+".visibility");
    
    string $meta=`shadingNode -asUtility -n ("meta_"+$cnt[0]) network`;
    
    addAttr -ln "type" -dt "string" $meta;
    setAttr ($meta+".type") -type "string" "control";
    addAttr -ln "component" -dt "string" $meta;
    setAttr ($meta+".component") -type "string" "uppertwist";
    addAttr -ln "system" -dt "string" $meta;
    setAttr ($meta+".system") -type "string" "bend";
    addAttr -ln "metaParent" -at message $meta;
    connectAttr -f ($module+".message") ($meta+".metaParent");
    addAttr -ln "metaParent" -at message $cnt[0];
    connectAttr -f ($meta+".message") ($cnt[0]+".metaParent");
    addAttr -ln "index" -at long $meta;
    setAttr ($meta+".index") $o;
    
    string $meta=`shadingNode -asUtility -n ("meta_"+$jnt) network`;
    
    addAttr -ln "type" -dt "string" $meta;
    setAttr ($meta+".type") -type "string" "joint";
    addAttr -ln "component" -dt "string" $meta;
    setAttr ($meta+".component") -type "string" "uppertwist";
    addAttr -ln "system" -dt "string" $meta;
    setAttr ($meta+".system") -type "string" "skin";
    addAttr -ln "metaParent" -at message $meta;
    connectAttr -f ($module+".message") ($meta+".metaParent");
    addAttr -ln "metaParent" -at message $jnt;
    connectAttr -f ($meta+".message") ($jnt+".metaParent");
    addAttr -ln "index" -at long $meta;
    setAttr ($meta+".index") $o;
    
    setAttr -lock true -keyable false -channelBox false ($cnt[0]+".v");
}

//setup lower jnts
delete `parentConstraint -weight 1 $elbowBLD $lowerDRV[0]`;

string $lowerIkHandle[]=`ikHandle -sol ikSplineSolver -createCurve 1 -sj $lowerDRV[0] -endEffector $lowerDRV[$lowerTwistCount]`;

select -cl;
float $lowerCurve01POS[]=`xform -q -ws -translation ($lowerIkHandle[2]+".cv[1]")`;
string $lowerBend01JNT=`joint -p $lowerCurve01POS[0] $lowerCurve01POS[1] $lowerCurve01POS[2] -n ($prefix+"lowerBend01_jnt")`;

select -cl;
float $lowerCurve02POS[]=`xform -q -ws -translation ($lowerIkHandle[2]+".cv[2]")`;
string $lowerBend02JNT=`joint -p $lowerCurve02POS[0] $lowerCurve02POS[1] $lowerCurve02POS[2] -n ($prefix+"lowerBend02_jnt")`;

string $skin[]=`skinCluster -tsb $elbowBLD $lowerBend01JNT $lowerBend02JNT $lowerIkHandle[2]`;

skinPercent -tv $elbowBLD 1 $skin[0] ($lowerIkHandle[2]+".cv[0]");
skinPercent -tv $lowerBend01JNT 1 $skin[0] ($lowerIkHandle[2]+".cv[1]");
skinPercent -tv $lowerBend02JNT 1 $skin[0] ($lowerIkHandle[2]+".cv[2]");
skinPercent -tv $elbowBLD 1 $skin[0] ($lowerIkHandle[2]+".cv[3]");

delete `parentConstraint -weight 1 $averageJNT $lowerBend01JNT`;
delete `parentConstraint -weight 1 $averageJNT $lowerBend02JNT`;

string $lowerBend01GRP=`createNode "transform" -ss -n ($prefix+"lowerBend01_grp")`;
string $lowerBend02GRP=`createNode "transform" -ss -n ($prefix+"lowerBend02_grp")`;

delete `parentConstraint -weight 1 $averageJNT $lowerBend01GRP`;
delete `parentConstraint -weight 1 $averageJNT $lowerBend02GRP`;

parent $lowerBend01JNT $lowerBend01GRP;
parent $lowerBend02JNT $lowerBend02GRP;
parent $lowerBend01GRP $averageJNT;
parent $lowerBend02GRP $averageJNT;

orientConstraint -weight 1 -offset 0 0 0 $elbowBLD $lowerBend02GRP;

string $lowerBend01MD=`shadingNode -asUtility -n ($prefix+"lowerBend01_md") multiplyDivide`;
setAttr ($lowerBend01MD+".input2X") ($lowerLength-0.0001);
connectAttr -f ($extraCNT+".bendy") ($lowerBend01MD+".input1X");

connectAttr -f ($lowerBend01MD+".outputX") ($lowerBend01JNT+".tx");
connectAttr -f ($lowerBend01MD+".outputX") ($lowerBend02JNT+".tx");

setAttr ($lowerIkHandle[0]+".dTwistControlEnable") 1;
setAttr ($lowerIkHandle[0]+".dWorldUpType") 4;
connectAttr -f ($elbowBLD+".worldMatrix[0]") ($lowerIkHandle[0]+".dWorldUpMatrix");
connectAttr -f ($wristJNT+".worldMatrix[0]") ($lowerIkHandle[0]+".dWorldUpMatrixEnd");

//making twist jnts stretchy
string $lowerBendStretch01MD=`shadingNode -asUtility -n ($prefix+"lowerBendStretch01_md") multiplyDivide`;
setAttr ($lowerBendStretch01MD+".operation") 2;
setAttr ($lowerBendStretch01MD+".input2X") ($lowerLength);

string $lowerBendStretch02MD=`shadingNode -asUtility -n ($prefix+"lowerBendStretch02_md") multiplyDivide`;
setAttr ($lowerBendStretch02MD+".operation") 2;
connectAttr -f ($plug+".sx") ($lowerBendStretch02MD+".input2X");

string $temp[]=`listRelatives -s $lowerIkHandle[2]`;
string $temp01=`arclen -ch 1 $temp[0]`;
string $lowerBendStretch01INFO=`rename $temp01 ($prefix+"lowerBendStretch01_info")`;

connectAttr -f ($lowerBendStretch01INFO+".arcLength") ($lowerBendStretch01MD+".input1X");

connectAttr -f ($lowerBendStretch01MD+".outputX") ($lowerBendStretch02MD+".input1X");

for($o = 0; $o < ($lowerTwistCount); $o++)
{
    connectAttr -f ($lowerBendStretch02MD+".outputX") ($lowerDRV[$o]+".sx");
}

parent $lowerDRV[0] $shoulderJNT;

//rename curves and ikHandles
rename $lowerIkHandle[0] ($prefix+"lowerBend01_ikHandle");
rename $lowerIkHandle[1] ($prefix+"lowerBend01_eff");
rename $lowerIkHandle[2] ($prefix+"lowerBend01_crv");

//create bend controls
for($o = 0; $o < ($lowerTwistCount); $o++)
{
    select -cl;
    string $jnt=`joint -p 0 0 0 -n ($prefix+"lowerTwist_jnt"+$o)`;
    string $cnt[]=`circle -ch 0 -n ($prefix+"lowerTwist_cnt"+$o)`;
    
    parent $jnt $cnt[0];
    
    rotate -r -os 0 -90 0 ($cnt[0]+".cv[0:7]");
    
    delete `parentConstraint -weight 1 $lowerDRV[$o] $cnt[0]`;
    
    parent $cnt $lowerDRV[$o];
    
    connectAttr -f ($extraCNT+".fineTuneControl") ($cnt[0]+".visibility");
    
    string $meta=`shadingNode -asUtility -n ("meta_"+$cnt[0]) network`;
    
    addAttr -ln "type" -dt "string" $meta;
    setAttr ($meta+".type") -type "string" "control";
    addAttr -ln "component" -dt "string" $meta;
    setAttr ($meta+".component") -type "string" "lowertwist";
    addAttr -ln "system" -dt "string" $meta;
    setAttr ($meta+".system") -type "string" "bend";
    addAttr -ln "metaParent" -at message $meta;
    connectAttr -f ($module+".message") ($meta+".metaParent");
    addAttr -ln "metaParent" -at message $cnt[0];
    connectAttr -f ($meta+".message") ($cnt[0]+".metaParent");
    addAttr -ln "index" -at long $meta;
    setAttr ($meta+".index") $o;
    
    string $meta=`shadingNode -asUtility -n ("meta_"+$jnt) network`;
    
    addAttr -ln "type" -dt "string" $meta;
    setAttr ($meta+".type") -type "string" "joint";
    addAttr -ln "component" -dt "string" $meta;
    setAttr ($meta+".component") -type "string" "lowertwist";
    addAttr -ln "system" -dt "string" $meta;
    setAttr ($meta+".system") -type "string" "skin";
    addAttr -ln "metaParent" -at message $meta;
    connectAttr -f ($module+".message") ($meta+".metaParent");
    addAttr -ln "metaParent" -at message $jnt;
    connectAttr -f ($meta+".message") ($jnt+".metaParent");
    addAttr -ln "index" -at long $meta;
    setAttr ($meta+".index") $o;
    
    setAttr -lock true -keyable false -channelBox false ($cnt[0]+".v");
}

//create elbow control
select -cl;
string $elbowCNT[]=`circle -ch 0 -n ($prefix+"bend_cnt")`;

rotate -r -os 0 -90 0 ($elbowCNT[0]+".cv[0:7]");

delete `parentConstraint -weight 1 $averageJNT $elbowCNT[0]`;

parent $elbowJNT $elbowCNT[0];

parent $elbowCNT $averageJNT;

connectAttr -f ($extraCNT+".fineTuneControl") ($elbowCNT[1]+".visibility");

setAttr -lock true -keyable false -channelBox false ($elbowCNT[1]+".v");

///setup for ZvParentMaster
select $ikWristCNT;
group -n ($prefix+"ikWrist_cnt_SN");
group -n ($prefix+"ikWrist_cnt_PH");

select $polevectorCNT;
group -n ($prefix+"polevector_cnt_SN");
group -n ($prefix+"polevector_cnt_PH");