//finding the module
string $module="";
for($i in `ls -type network`)
{
    if((`getAttr ($i+".type")`=="module") && (`attributeQuery -node $i -exists "system"`) && (`getAttr ($i+".system")`=="template") && (`getAttr ($i+".component")`=="finger3"))
    {
        $module=$i;
    }
}

//finding the joints
string $nodes[]={};
for($i in `listConnections -type network ($module+".message")`)
{
    if((`getAttr ($i+".type")`=="control") && (`getAttr ($i+".index")`>=0))
    {
        $nodes[size($nodes)]=$i;
    }
}

//while loop to ensure joint order is correct
string $fingerJoints[]={};
int $index=0;
int $count=(size($nodes)-1);
while($index<=$count)
{
    for($node in $nodes)
    {
        if(`getAttr ($node+".index")`==$index)
        {
            $fingerJoints[size($fingerJoints)]=$node;
            
            $index++;
        }
    }
}

//getting root data
string $temp[]=`listConnections -type joint ($fingerJoints[0]+".message")`;
print $temp;
$rootJNTPOS=`xform -worldSpace -query -translation $temp[0]`;
$rootJNTROT=`xform -worldSpace -query -rotation $temp[0]`;

//establish side
string $side="c";

if($rootJNTPOS[0] > 1.0)
{
    $side="l";
}
if($rootJNTPOS[0] < -1.0)
{
    $side="r";
}

//establish index
int $index=`getAttr ($module+".index")`;
if(size(`ls -type network`)!=0)
{
    for($i in `ls -type network`)
    {
        if((`getAttr ($i+".type")`=="module") && (`attributeQuery -node $i -exists "index"`) && (`getAttr ($i+".component")`=="finger") && (`getAttr ($i+".side")`==$side) && (`getAttr ($i+".index")`==$index))
        {
            $index=`getAttr ($i+".index")`+1;
        }
    }
}

//establish prefix and suffix
string $prefix=($side+"_finger"+$index+"_");
string $suffix=("_"+$side+"_finger"+$index);

//create joints
select -cl;
string $rootJNT=`joint -p ($rootJNTPOS[0]) ($rootJNTPOS[1]) ($rootJNTPOS[2]) -o ($rootJNTROT[0]) ($rootJNTROT[1]) ($rootJNTROT[2]) -n ($prefix+"root_jnt")`;

string $rootCNT=`curve -n ($prefix+"root_cnt") -d 1 -p 0 0 0 -p 0 1.2 0 -p -0.235114 1.276393 0 -p -0.380423 1.476393 0 -p -0.380423 1.723607 0 -p -0.235114 1.923607 0 -p 0 2 0 -p 0.235114 1.923607 0 -p 0.380423 1.723607 0 -p 0.380423 1.476393 0 -p 0.235114 1.276393 0 -p 0 1.2 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11`;

delete `parentConstraint -weight 1 $rootJNT $rootCNT`;

rotate -r -os -90 0 90 ($rootCNT+".cv[0:11]");

string $fingerJnts[]={$rootJNT};
string $jnts[]={};
for($m = 1; $m < ($count+1); $m++)
{
    select -cl;
    
    string $temp[]=`listConnections -type joint ($fingerJoints[$m]+".message")`;
    $pos=`xform -worldSpace -query -translation $temp[0]`;
    string $jnt=`joint -p ($pos[0]) ($pos[1]) ($pos[2]) -n ($prefix+$m+"_jnt")`;
    
    $jnts[size($jnts)]=$jnt;
    $fingerJnts[size($fingerJnts)]=$jnt;
}

//deleting module finger template
string $root="";
for($i in `listConnections ($module+".message")`)
{
    if((`attributeQuery -node $i -exists "component"`) && (`getAttr ($i+".component")`=="root"))
    {
        for($node in `listConnections ($i+".message")`)
        {
            if(`nodeType($node)`=="transform")
            {
                $root=$node;
            }
        }
    }
}

delete $root;

//calculate length of finger
$fingerEndPOS=`xform -worldSpace -query -translation $jnts[size($jnts)-1]`;
float $distX=$rootJNTPOS[0]-$fingerEndPOS[0];
float $distY=$rootJNTPOS[1]-$fingerEndPOS[1];
float $distZ=$rootJNTPOS[2]-$fingerEndPOS[2];

float $fingerLength=`mag <<$distX,$distY,$distZ>>`;

//create module
string $module=`shadingNode -asUtility -n ("meta"+$suffix) network`;

addAttr -ln "type" -dt "string" $module;
setAttr ($module+".type") -type "string" "module";
addAttr -ln "component" -dt "string" $module;
setAttr ($module+".component") -type "string" "finger";
addAttr -ln "metaParent" -at message $module;
addAttr -ln "index" -at long $module;
setAttr ($module+".index") $index;
addAttr -ln "side" -dt "string" $module;
setAttr ($module+".side") -type "string" $side;

//create plug
string $helper_loc[] = `spaceLocator -n ($prefix+"plug")`;
string $plug=$helper_loc[0];
delete `parentConstraint -weight 1 $rootJNT $plug`;
string $plugMETA=`shadingNode -asUtility -n ("meta_"+$plug) network`;
addAttr -ln "type" -dt "string" $plugMETA;
setAttr ($plugMETA+".type") -type "string" "plug";
addAttr -ln "component" -dt "string" $plugMETA;
setAttr ($plugMETA+".component") -type "string" "finger";
addAttr -ln "metaParent" -at message $plugMETA;
connectAttr -f ($module+".message") ($plugMETA+".metaParent");

addAttr -ln "metaParent" -at message $plug;
connectAttr -f ($plugMETA+".message") ($plug+".metaParent");

delete `parentConstraint -weight 1 $rootJNT $plug`;

parent $rootCNT $plug;

rotate -r -os 90 0 0 $plug;

//tag root joint 
string $jntMETA=`shadingNode -asUtility -n ("meta_"+$rootJNT) network`;
addAttr -ln "type" -dt "string" $jntMETA;
setAttr ($jntMETA+".type") -type "string" "joint";
addAttr -ln "component" -dt "string" $jntMETA;
setAttr ($jntMETA+".component") -type "string" "finger";
addAttr -ln "system" -dt "string" $jntMETA;
setAttr ($jntMETA+".system") -type "string" "skin";
addAttr -ln "metaParent" -at message $jntMETA;
connectAttr -f ($module+".message") ($jntMETA+".metaParent");

addAttr -ln "metaParent" -at message $rootJNT;
connectAttr -f ($jntMETA+".message") ($rootJNT+".metaParent");

//setup jnts
delete `parentConstraint -weight 1 $rootCNT $rootJNT`;
parent $rootJNT $rootCNT;

for($m = 0; $m < ($count-1); $m++)
{
    delete `aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject $rootJNT $jnts[($m+1)] $jnts[$m]`;
    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 $jnts[$m];
    
    //tag jnts
    string $jntMETA=`shadingNode -asUtility -n ("meta_"+$jnts[$m]) network`;
    addAttr -ln "type" -dt "string" $jntMETA;
    setAttr ($jntMETA+".type") -type "string" "joint";
    addAttr -ln "component" -dt "string" $jntMETA;
    setAttr ($jntMETA+".component") -type "string" "finger";
    addAttr -ln "system" -dt "string" $jntMETA;
    setAttr ($jntMETA+".system") -type "string" "skin";
    addAttr -ln "metaParent" -at message $jntMETA;
    connectAttr -f ($module+".message") ($jntMETA+".metaParent");
    
    addAttr -ln "metaParent" -at message $jnts[$m];
    connectAttr -f ($jntMETA+".message") ($jnts[$m]+".metaParent");
    
    //create cnt
    string $helper_loc[]=`circle -ch 0 -n ($prefix+($m+1)+"_cnt")`;
    string $cnt=$helper_loc[0];
    
    delete `parentConstraint -weight 1 $jnts[$m] $cnt`;
    
    rotate -r -ocp -os 0 90 0 ($cnt+".cv[0:7]");
    
    //create grps
    string $drv=`createNode "transform" -n ($prefix+($m+1)+"_drv") -ss`;
    string $grp=`createNode "transform" -n ($prefix+($m+1)+"_grp") -ss`;
    
    delete `parentConstraint -weight 1 $jnts[$m] $drv`;
    delete `parentConstraint -weight 1 $jnts[$m] $grp`;
    
    parent $jnts[$m] $cnt;
    parent $cnt $drv;
    parent $drv $grp;
    
    parent $grp $fingerJnts[$m];
    
    connectAttr -f ($rootCNT+".ry") ($drv+".ry");
    
    //tag controls
    string $meta=`shadingNode -asUtility -n ("meta_"+$cnt) network`;
    
    addAttr -ln "type" -dt "string" $meta;
    setAttr ($meta+".type") -type "string" "control";
    addAttr -ln "component" -dt "string" $meta;
    setAttr ($meta+".component") -type "string" "joint";
    addAttr -ln "metaParent" -at message $meta;
    connectAttr -f ($module+".message") ($meta+".metaParent");
    addAttr -ln "metaParent" -at message $cnt;
    connectAttr -f ($meta+".message") ($cnt+".metaParent");
    addAttr -ln "index" -at long $meta;
    setAttr ($meta+".index") ($m+1);
}

//delete end jnt
delete $jnts[size($jnts)-1];

//create rootMETA
string $rootMETA=`shadingNode -asUtility -n ("meta_"+$rootCNT) network`;

addAttr -ln "type" -dt "string" $rootMETA;
setAttr ($rootMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $rootMETA;
setAttr ($rootMETA+".component") -type "string" "root";
addAttr -ln "metaParent" -at message $rootMETA;
connectAttr -f ($module+".message") ($rootMETA+".metaParent");
addAttr -ln "metaParent" -at message $rootCNT;
connectAttr -f ($rootMETA+".message") ($rootCNT+".metaParent");
addAttr -ln "index" -at long $rootMETA;
setAttr ($rootMETA+".index") 0;