//finding the module
string $module="";
for($i in `ls -type network`)
{
    if((`getAttr ($i+".type")`=="module") && (`attributeQuery -node $i -exists "system"`) && (`getAttr ($i+".system")`=="template") && (`getAttr ($i+".component")`=="spine"))
    {
        $module=$i;
    }
}

//finding the joints
string $chest;
string $hip;
string $spine;

for($i in `listConnections -type network ($module+".message")`)
{
    if((`getAttr ($i+".component")`=="chest"))
    {
        $chest=$i;
    }
    if((`getAttr ($i+".component")`=="hip"))
    {
        $hip=$i;
    }
    if((`getAttr ($i+".component")`=="spine"))
    {
        $spine=$i;
    }
}

//getting position data
string $spineTemp[]=`listConnections -type joint ($chest+".message")`;
$chestPOS=`xform -worldSpace -query -translation $spineTemp[0]`;
$chestROT=`xform -worldSpace -query -rotation $spineTemp[0]`;

string $spineTemp[]=`listConnections -type joint ($hip+".message")`;
$hipPOS=`xform -worldSpace -query -translation $spineTemp[0]`;
$hipROT=`xform -worldSpace -query -rotation $spineTemp[0]`;

//getting number of spine joints
int $numSpineJNT=`getAttr ($spine+".numberOfSpineJoints")`;

//establish side
string $side="c";

if($chestPOS[0] < -1.0)
{
    $side="r";
}
else if($chestPOS[0] > 1.0)
{
    $side="l";
}

//establish index
int $index=`getAttr ($module+".index")`;
if(size(`ls -type network`)!=0)
{
    for($i in `ls -type network`)
    {
        if((`getAttr ($i+".type")`=="module") && (`attributeQuery -node $i -exists "index"`) && (`getAttr ($i+".component")`=="spine") && (`attributeQuery -node $i -exists "side"`) && (`getAttr ($i+".side")`==$side) && (`getAttr ($i+".index")`==$index))
        {
            $index=`getAttr ($i+".index")`+1;
        }
    }
}

//deleting module template
string $root="";
for($i in `listConnections ($module+".message")`)
{
    if((`attributeQuery -node $i -exists "component"`) && (`getAttr ($i+".component")`=="root"))
    {
        $temp=`listConnections ($i+".message")`;
        for($node in `listConnections ($i+".message")`)
        {
            if(`nodeType($node)`=="transform")
            {
                $root=$node;
            }
        }
    }
}

delete $root;

//establish prefix and suffix
string $prefix=($side+"_spine"+$index+"_");
string $suffix=("_"+$side+"_spine"+$index);

//calculate length of spine
float $distX=$chestPOS[0]-$hipPOS[0];
float $distY=$chestPOS[1]-$hipPOS[1];
float $distZ=$chestPOS[2]-$hipPOS[2];

float $spineLength=`mag <<$distX,$distY,$distZ>>`;

//create module
string $module=`shadingNode -asUtility -n ("meta"+$suffix) network`;

addAttr -ln "type" -dt "string" $module;
setAttr ($module+".type") -type "string" "module";
addAttr -ln "component" -dt "string" $module;
setAttr ($module+".component") -type "string" "spine";
addAttr -ln "metaParent" -at message $module;
addAttr -ln "index" -at long $module;
setAttr ($module+".index") $index;
addAttr -ln "side" -dt "string" $module;
setAttr ($module+".side") -type "string" $side;

//create plug
string $helper_loc[] = `spaceLocator -n ($prefix+"plug")`;
string $plug=$helper_loc[0];
move -a $hipPOS[0] $hipPOS[1] $hipPOS[2] $plug;
string $plugMETA=`shadingNode -asUtility -n ("meta_"+$plug) network`;
addAttr -ln "type" -dt "string" $plugMETA;
setAttr ($plugMETA+".type") -type "string" "plug";
addAttr -ln "component" -dt "string" $plugMETA;
setAttr ($plugMETA+".component") -type "string" "spine";
addAttr -ln "metaParent" -at message $plugMETA;
connectAttr -f ($module+".message") ($plugMETA+".metaParent");

addAttr -ln "metaParent" -at message $plug;
connectAttr -f ($plugMETA+".message") ($plug+".metaParent");

string $helperJNT =`joint -p ($chestPOS[0]) ($chestPOS[1]) ($chestPOS[2]) -o ($chestROT[0]) ($chestROT[1]) ($chestROT[2])`;

delete `aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 0 1 -worldUpType "objectrotation" -worldUpVector 0 0 1 -worldUpObject $helperJNT $helperJNT $plug`;

delete $helperJNT;

//create spine joints
select -cl;
string $jnts[]={};
string $jntMETAS[]={};
for($o = 1; $o < ($numSpineJNT+2); $o++)
{
    select -cl;
    string $jnt =`joint -p (($spineLength/$numSpineJNT)*$o) 0 0 -n ($prefix+"jnt"+$o)`;
    
    string $jntMETA=`shadingNode -asUtility -n ("meta_"+$jnt) network`;
    addAttr -ln "type" -dt "string" $jntMETA;
    setAttr ($jntMETA+".type") -type "string" "joint";
    addAttr -ln "component" -dt "string" $jntMETA;
    setAttr ($jntMETA+".component") -type "string" "spine";
    addAttr -ln "system" -dt "string" $jntMETA;
    setAttr ($jntMETA+".system") -type "string" "skin";
    addAttr -ln "metaParent" -at message $jntMETA;
    connectAttr -f ($module+".message") ($jntMETA+".metaParent");
    
    addAttr -ln "metaParent" -at message $jnt;
    connectAttr -f ($jntMETA+".message") ($jnt+".metaParent");
    
    $jnts[size($jnts)]=$jnt;
    $jntMETAS[size($jntMETAS)]=$jntMETA;
}

for($o = 0; $o < $numSpineJNT; $o++)
{
    parent $jnts[($o+1)] $jnts[$o];
}

delete `parentConstraint -weight 1 $plug $jnts[0]`;

rotate -ws ($chestROT[0]) ($chestROT[1]) ($chestROT[2]) $jnts[$numSpineJNT];

parent $jnts[0] $plug;

//adjust end spine jnt
delete $jntMETAS[size($jntMETAS)-1];

deleteAttr ($jnts[size($jnts)-1]+".metaParent");

//create chest joint
select -cl;
string $chestJNT =`joint -p ($chestPOS[0]) ($chestPOS[1]) ($chestPOS[2]) -o ($chestROT[0]) ($chestROT[1]) ($chestROT[2]) -n ($prefix+"chest_jnt")`;

string $jntMETA=`shadingNode -asUtility -n ("meta_"+$chestJNT) network`;
addAttr -ln "type" -dt "string" $jntMETA;
setAttr ($jntMETA+".type") -type "string" "joint";
addAttr -ln "component" -dt "string" $jntMETA;
setAttr ($jntMETA+".component") -type "string" "chest";
addAttr -ln "system" -dt "string" $jntMETA;
setAttr ($jntMETA+".system") -type "string" "skin";
addAttr -ln "metaParent" -at message $jntMETA;
connectAttr -f ($module+".message") ($jntMETA+".metaParent");

addAttr -ln "metaParent" -at message $chestJNT;
connectAttr -f ($jntMETA+".message") ($chestJNT+".metaParent");

//create fk chain
select -cl;
string $fkGRPS[]={};
string $fkCNTS[]={};
string $fkMETAS[]={};
for($o = 0; $o < ($numSpineJNT+1); $o++)
{
    string $cnt=`curve -d 1 -p 0.5 0 -0.5 -p 0.5 0 0.5 -p -0.5 0 0.5 -p -0.5 0 -0.5 -p 0.5 0 -0.5 -n ($prefix+"fk"+$o+"_cnt")`;
    string $grp=`createNode "transform" -n ($prefix+"fk"+$o+"_grp") -ss`;
    
    parent $cnt $grp;
    delete `parentConstraint -weight 1 $jnts[$o] $grp`;
    
    rotate -r -os 0 0 90 ($cnt+".cv[0:4]");
    
    $fkCNTS[$o]=$cnt;
    $fkGRPS[$o]=$grp;
    
    string $META=`shadingNode -asUtility -n ("meta_"+$cnt) network`;
    
    addAttr -ln "type" -dt "string" $META;
    setAttr ($META+".type") -type "string" "control";
    addAttr -ln "component" -dt "string" $META;
    setAttr ($META+".component") -type "string" "spine";
    addAttr -ln "system" -dt "string" $META;
    setAttr ($META+".system") -type "string" "fk";
    addAttr -ln "metaParent" -at message $META;
    connectAttr -f ($module+".message") ($META+".metaParent");
    addAttr -ln "metaParent" -at message $cnt;
    connectAttr -f ($META+".message") ($cnt+".metaParent");
    addAttr -ln "index" -at long $META;
    setAttr ($META+".index") ($o+1);
    
    $fkMETAS[$o]=$META;
    
    setAttr -lock true -keyable false -channelBox false ($cnt+".sx");
    setAttr -lock true -keyable false -channelBox false ($cnt+".sy");
    setAttr -lock true -keyable false -channelBox false ($cnt+".sz");
    setAttr -lock true -keyable false -channelBox false ($cnt+".tx");
    setAttr -lock true -keyable false -channelBox false ($cnt+".ty");
    setAttr -lock true -keyable false -channelBox false ($cnt+".tz");
}

parent $fkGRPS[0] $plug;

for($o = 1; $o < ($numSpineJNT+1); $o++)
{
    parent $fkGRPS[$o] $fkCNTS[$o-1];
}

//create ik chain
select -cl;
string $ikJNTS[]={};
for($o = 1; $o < ($numSpineJNT+2); $o++)
{
    string $jnt =`joint -p (($spineLength/$numSpineJNT)*$o) 0 0 -n ($prefix+"ik"+$o+"_jnt")`;
    
    $ikJNTS[size($ikJNTS)]=$jnt;
}

delete `parentConstraint -weight 1 $plug $ikJNTS[0]`;

rotate -ws ($chestROT[0]) ($chestROT[1]) ($chestROT[2]) $ikJNTS[$numSpineJNT];

parent $ikJNTS[0] $plug;

// create spine jnts
select -cl;
string $ikHipJNT =`joint -p ($hipPOS[0]) ($hipPOS[1]) ($hipPOS[2]) -o ($hipROT[0]) ($hipROT[1]) ($hipROT[2]) -n ($prefix+"ikHip_jnt")`;
select -cl;
string $ikChestJNT =`joint -p ($chestPOS[0]) ($chestPOS[1]) ($chestPOS[2]) -o ($chestROT[0]) ($chestROT[1]) ($chestROT[2]) -n ($prefix+"ikChest_jnt")`;

//setup gut joint
string $gutGRP=`createNode "transform" -n ($prefix+"gut_grp") -ss`;
string $gutJNT=`joint -p 0 0 0 -n ($prefix+"gut_jnt")`;

parent $gutJNT $gutGRP;

delete `pointConstraint -offset 0 0 0 -weight 1 $ikHipJNT $ikChestJNT $gutGRP`;

string $gutposGRP=`createNode "transform" -n ($prefix+"gutPos_grp") -ss`;
string $gutAimAtGRP=`createNode "transform" -n ($prefix+"gutAimAt_grp") -ss`;
string $gutAimupGRP=`createNode "transform" -n ($prefix+"gutAimUp_grp") -ss`;

delete `pointConstraint -offset 0 0 0 -weight 1 $gutGRP $gutposGRP`;
delete `pointConstraint -offset 0 0 0 -weight 1 $gutGRP $gutAimAtGRP`;
delete `pointConstraint -offset 0 0 0 -weight 1 $gutGRP $gutAimupGRP`;

delete `orientConstraint -offset 0 0 0 -weight 1 $gutGRP $gutposGRP`;
delete `orientConstraint -offset 0 0 0 -weight 1 $gutGRP $gutAimAtGRP`;
delete `orientConstraint -offset 0 0 0 -weight 1 $gutGRP $gutAimupGRP`;

move -r -os ($spineLength/10) 0 0 $gutAimAtGRP;
move -r -os 0 ($spineLength/10) 0 $gutAimupGRP;

pointConstraint -offset 0 0 0 -weight 1 $gutposGRP $gutGRP;
aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 -1 0 -upVector 1 0 0 -worldUpType "object" -worldUpObject $gutAimupGRP $gutAimAtGRP $gutGRP;
parentConstraint -maintainOffset -weight 1 $ikHipJNT $ikChestJNT $gutposGRP;
parentConstraint -maintainOffset -weight 1 $ikHipJNT $ikChestJNT $gutAimAtGRP;
parentConstraint -maintainOffset -weight 1 $ikHipJNT $ikChestJNT $gutAimupGRP;

scaleConstraint -offset 1 1 1 -weight 1 $plug $gutGRP;

delete `parentConstraint -weight 1 $gutGRP $gutJNT`;

//create hip cnt
string $helper_loc[] = `circle -ch 0 -n ($prefix+"hip_cnt")`;
string $hipCNT=$helper_loc[0];

delete `parentConstraint -weight 1 $jnts[0] $hipCNT`;

rotate -r -os 0 90 0 ($hipCNT+".cv[0:7]");

string $hipGRP=`createNode "transform" -n ($prefix+"hip_grp") -ss`;

delete `parentConstraint -weight 1 $jnts[0] $hipGRP`;

parent $hipCNT $hipGRP;
parent $hipGRP $plug;

string $hipParentCon[]=`parentConstraint -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 $jnts[0] $plug $hipGRP`;

pointConstraint $jnts[0] $hipGRP;

string $meta=`shadingNode -asUtility -n ("meta_"+$hipCNT) network`;

addAttr -ln "type" -dt "string" $meta;
setAttr ($meta+".type") -type "string" "control";
addAttr -ln "component"  -dt "string" $meta;
setAttr ($meta+".component") -type "string" "hip";
addAttr -ln "metaParent" -at message $meta;
connectAttr -f ($module+".message") ($meta+".metaParent");
addAttr -ln "metaParent" -at message $hipCNT;
connectAttr -f ($meta+".message") ($hipCNT+".metaParent");

setAttr -lock true -keyable false -channelBox false ($hipCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($hipCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($hipCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($hipCNT+".tx");
setAttr -lock true -keyable false -channelBox false ($hipCNT+".ty");
setAttr -lock true -keyable false -channelBox false ($hipCNT+".tz");
setAttr -lock true -keyable false -channelBox false ($hipCNT+".v");

//create hip joint
select -cl;

string $hipJNT =`joint -p ($hipPOS[0]) ($hipPOS[1]) ($hipPOS[2]) -o ($hipROT[0]) ($hipROT[1]) ($hipROT[2]) -n ($prefix+"hip_jnt")`;

delete `parentConstraint -weight 1 $hipCNT $hipJNT`;

parent $hipJNT $hipCNT;

move -os (-$spineLength/5) 0 0 $hipJNT;

string $hipMETA=`shadingNode -asUtility -n ("meta_"+$hipJNT) network`;
addAttr -ln "type" -dt "string" $hipMETA;
setAttr ($hipMETA+".type") -type "string" "joint";
addAttr -ln "component" -dt "string" $hipMETA;
setAttr ($hipMETA+".component") -type "string" "hip";
addAttr -ln "system" -dt "string" $hipMETA;
setAttr ($hipMETA+".system") -type "string" "skin";
addAttr -ln "metaParent" -at message $hipMETA;
connectAttr -f ($module+".message") ($hipMETA+".metaParent");

addAttr -ln "metaParent" -at message $hipJNT;
connectAttr -f ($hipMETA+".message") ($hipJNT+".metaParent");

//create hip socket
string $helper_loc[] = `spaceLocator -n ($prefix+"hip_socket")`;
string $socket=$helper_loc[0];

delete `parentConstraint -weight 1 $hipJNT $socket`;
parent $socket $hipJNT;

string $socketMETA=`shadingNode -asUtility -n ("meta_"+$socket) network`;
addAttr -ln "type" -dt "string" $socketMETA;
setAttr ($socketMETA+".type") -type "string" "socket";
addAttr -ln "component" -dt "string" $socketMETA;
setAttr ($socketMETA+".component") -type "string" "hip";
addAttr -ln "metaParent" -at message $socketMETA;
connectAttr -f ($module+".message") ($socketMETA+".metaParent");

addAttr -ln "metaParent" -at message $socket;
connectAttr -f ($socketMETA+".message") ($socket+".metaParent");

//calculate mid point of spine
string $spineTemp1[]=`spaceLocator`;
string $spineTemp2[]=`spaceLocator`;
string $spineTemp3[]=`spaceLocator`;

move ($chestPOS[0]) ($chestPOS[1]) ($chestPOS[2]) $spineTemp1[0];
move ($hipPOS[0]) ($hipPOS[1]) ($hipPOS[2]) $spineTemp2[0];

pointConstraint -offset 0 0 0 -weight 1 $spineTemp1[0] $spineTemp2[0] $spineTemp3[0];

float $midX=`getAttr ($spineTemp3[0]+".tx")`;
float $midY=`getAttr ($spineTemp3[0]+".ty")`;
float $midZ=`getAttr ($spineTemp3[0]+".tz")`;

delete $spineTemp1[0];
delete $spineTemp2[0];
delete $spineTemp3[0];

//create spineGEO
string $spineTemp[]=`nurbsPlane -p 0 0 0 -ax 0 1 0 -w ($spineLength/3) -lr ($spineLength/($spineLength/3)) -d 3 -u 1 -v 2 -ch 1 -n ($prefix+"geo")`;
string $spineGEO=$spineTemp[0];

//setup spineGEO
move $midX $midY $midZ $spineGEO;

string $spineTemp[]=`spaceLocator`;

delete `parentConstraint -weight 1 $chestJNT $spineTemp[0]`;
move -r -os 0 0 (-$spineLength) $spineTemp[0];

delete `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "object" -worldUpObject $spineTemp[0] $chestJNT $spineGEO`;

delete $spineTemp;

rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su 1 -du 1 -sv 5 -dv 1 -tol 0.01 -fr 0  -dir 0 $spineGEO;

rotate -r -os 0 180 0 $spineGEO;

select $spineGEO;
DeleteHistory;
select -cl;

string $skin[]=`skinCluster -tsb $ikHipJNT $gutJNT $ikChestJNT $spineGEO`;

skinPercent -tv $ikHipJNT 1 $skin[0] ($spineGEO+".cv[0:1][0]");
skinPercent -tv $ikHipJNT 1 $skin[0] ($spineGEO+".cv[0:1][1]");
skinPercent -tv $ikChestJNT 1 $skin[0] ($spineGEO+".cv[0:1][3]");
skinPercent -tv $ikChestJNT 1 $skin[0] ($spineGEO+".cv[0:1][4]");
skinPercent -tv $gutJNT 1 $skin[0] ($spineGEO+".cv[0:1][2]");
skinPercent -tv $gutJNT 0.333 $skin[0] ($spineGEO+".cv[0:1][1]");
skinPercent -tv $gutJNT 0.333 $skin[0] ($spineGEO+".cv[0:1][3]");

setAttr ($spineGEO+".visibility") 0;

//create spine groups
string $posGRPS[];
string $upGRPS[];
string $ikHandles[];
for($o = 0; $o < $numSpineJNT; $o++)
{
    //create surface grps
    string $posGRP=`createNode "transform" -n ($prefix+"pos_grp"+$o) -ss`;
    $posGRPS[$o]=$posGRP;
    string $upGRP=`createNode "transform" -n ($prefix+"up_grp"+$o) -ss`;
    $upGRPS[$o]=$upGRP;
    string $psi=`createNode -n ($prefix+"up_psi0"+$o) pointOnSurfaceInfo`;
    
    //setup surface grps
    parent $upGRP $posGRP;
    
    setAttr ($psi+".parameterU") 0.5;
    setAttr ($psi+".parameterV") ((1.0/$numSpineJNT)*$o);
    
    connectAttr ($spineGEO+".worldSpace") ($psi+".inputSurface");
    connectAttr ($psi+".position") ($posGRP+".translate");
    connectAttr ($psi+".tangentU") ($upGRP+".translate");
    
    //create ik_handle
    string $ik_handle[]=`ikHandle -sj $ikJNTS[$o] -ee $ikJNTS[($o+1)] -sol ikRPsolver`;
    
    poleVectorConstraint -weight 1 $upGRP $ik_handle[0];
    
    setAttr ($ik_handle[0]+".twist") 180;
    
    setAttr ($ik_handle[0]+".visibility") 0;
    
    $ikHandles[$o]=$ik_handle[0];
}

//parenting ik handles
for($o = 0; $o < ($numSpineJNT-1); $o++)
{
    parent $ikHandles[$o] $posGRPS[($o+1)];
}

parent $ikHandles[$numSpineJNT-1] $ikChestJNT;

//create controls
string $ikChestCNT=`curve -n ($prefix+"ikChest_cnt") -d 1 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 -0.382683 0 -p -0.707107 -0.707107 0 -p -0.382683 -0.92388 0 -p 0 -1 0 -p 0.382683 -0.92388 0 -p 0.707107 -0.707107 0 -p 0.92388 -0.382683 0 -p 1 0 0 -p 0.92388 0.382683 0 -p 0.707107 0.707107 0 -p 0.382683 0.92388 0 -p 0 1 0 -p 0 0.92388 0.382683 -p 0 0.707107 0.707107 -p 0 0.382683 0.92388 -p 0 0 1 -p 0 -0.382683 0.92388 -p 0 -0.707107 0.707107 -p 0 -0.92388 0.382683 -p 0 -1 0 -p 0 -0.92388 -0.382683 -p 0 -0.707107 -0.707107 -p 0 -0.382683 -0.92388 -p 0 0 -1 -p 0 0.382683 -0.92388 -p 0 0.707107 -0.707107 -p 0 0.92388 -0.382683 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 0 0.382683 -p -0.707107 0 0.707107 -p -0.382683 0 0.92388 -p 0 0 1 -p 0.382683 0 0.92388 -p 0.707107 0 0.707107 -p 0.92388 0 0.382683 -p 1 0 0 -p 0.92388 0 -0.382683 -p 0.707107 0 -0.707107 -p 0.382683 0 -0.92388 -p 0 0 -1 -p -0.382683 0 -0.92388 -p -0.707107 0 -0.707107 -p -0.92388 0 -0.382683 -p -1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52`;
string $ikHipCNT=`curve -n ($prefix+"ikHip_cnt") -d 1 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 -0.382683 0 -p -0.707107 -0.707107 0 -p -0.382683 -0.92388 0 -p 0 -1 0 -p 0.382683 -0.92388 0 -p 0.707107 -0.707107 0 -p 0.92388 -0.382683 0 -p 1 0 0 -p 0.92388 0.382683 0 -p 0.707107 0.707107 0 -p 0.382683 0.92388 0 -p 0 1 0 -p 0 0.92388 0.382683 -p 0 0.707107 0.707107 -p 0 0.382683 0.92388 -p 0 0 1 -p 0 -0.382683 0.92388 -p 0 -0.707107 0.707107 -p 0 -0.92388 0.382683 -p 0 -1 0 -p 0 -0.92388 -0.382683 -p 0 -0.707107 -0.707107 -p 0 -0.382683 -0.92388 -p 0 0 -1 -p 0 0.382683 -0.92388 -p 0 0.707107 -0.707107 -p 0 0.92388 -0.382683 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 0 0.382683 -p -0.707107 0 0.707107 -p -0.382683 0 0.92388 -p 0 0 1 -p 0.382683 0 0.92388 -p 0.707107 0 0.707107 -p 0.92388 0 0.382683 -p 1 0 0 -p 0.92388 0 -0.382683 -p 0.707107 0 -0.707107 -p 0.382683 0 -0.92388 -p 0 0 -1 -p -0.382683 0 -0.92388 -p -0.707107 0 -0.707107 -p -0.92388 0 -0.382683 -p -1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52`;
string $gutCNT=`curve -n ($prefix+"gut_cnt") -d 1 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 -0.382683 0 -p -0.707107 -0.707107 0 -p -0.382683 -0.92388 0 -p 0 -1 0 -p 0.382683 -0.92388 0 -p 0.707107 -0.707107 0 -p 0.92388 -0.382683 0 -p 1 0 0 -p 0.92388 0.382683 0 -p 0.707107 0.707107 0 -p 0.382683 0.92388 0 -p 0 1 0 -p 0 0.92388 0.382683 -p 0 0.707107 0.707107 -p 0 0.382683 0.92388 -p 0 0 1 -p 0 -0.382683 0.92388 -p 0 -0.707107 0.707107 -p 0 -0.92388 0.382683 -p 0 -1 0 -p 0 -0.92388 -0.382683 -p 0 -0.707107 -0.707107 -p 0 -0.382683 -0.92388 -p 0 0 -1 -p 0 0.382683 -0.92388 -p 0 0.707107 -0.707107 -p 0 0.92388 -0.382683 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 0 0.382683 -p -0.707107 0 0.707107 -p -0.382683 0 0.92388 -p 0 0 1 -p 0.382683 0 0.92388 -p 0.707107 0 0.707107 -p 0.92388 0 0.382683 -p 1 0 0 -p 0.92388 0 -0.382683 -p 0.707107 0 -0.707107 -p 0.382683 0 -0.92388 -p 0 0 -1 -p -0.382683 0 -0.92388 -p -0.707107 0 -0.707107 -p -0.92388 0 -0.382683 -p -1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52`;
string $extraCNT=`curve -n ($prefix+"extra_cnt") -d 1 -p 0 0 0 -p 0 1.2 0 -p -0.235114 1.276393 0 -p -0.380423 1.476393 0 -p -0.380423 1.723607 0 -p -0.235114 1.923607 0 -p 0 2 0 -p 0.235114 1.923607 0 -p 0.380423 1.723607 0 -p 0.380423 1.476393 0 -p 0.235114 1.276393 0 -p 0 1.2 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11`;
string $torsoCNT=`curve -n ($prefix+"torso_cnt") -d 1 -p 0 0 -1.1025 -p -0.33 0 -0.6075 -p -0.165 0 -0.6075 -p -0.165 0 -0.165 -p -0.6075 0 -0.165 -p -0.6075 0 -0.33 -p -1.1025 0 0 -p -0.6075 0 0.33 -p -0.6075 0 0.165 -p -0.165 0 0.165 -p -0.165 0 0.6075 -p -0.33 0 0.6075 -p 0 0 1.1025 -p 0.33 0 0.6075 -p 0.165 0 0.6075 -p 0.165 0 0.165 -p 0.6075 0 0.165 -p 0.6075 0 0.33 -p 1.1025 0 0 -p 0.6075 0 -0.33 -p 0.6075 0 -0.165 -p 0.165 0 -0.165 -p 0.165 0 -0.6075 -p 0.33 0 -0.6075 -p 0 0 -1.1025 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24`;

string $spineCNT[];
for($o = 0; $o < ($numSpineJNT-1); $o++)
{
    string $cnt=`curve -n ($prefix+($o+1)+"_cnt") -d 1 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 -0.382683 0 -p -0.707107 -0.707107 0 -p -0.382683 -0.92388 0 -p 0 -1 0 -p 0.382683 -0.92388 0 -p 0.707107 -0.707107 0 -p 0.92388 -0.382683 0 -p 1 0 0 -p 0.92388 0.382683 0 -p 0.707107 0.707107 0 -p 0.382683 0.92388 0 -p 0 1 0 -p 0 0.92388 0.382683 -p 0 0.707107 0.707107 -p 0 0.382683 0.92388 -p 0 0 1 -p 0 -0.382683 0.92388 -p 0 -0.707107 0.707107 -p 0 -0.92388 0.382683 -p 0 -1 0 -p 0 -0.92388 -0.382683 -p 0 -0.707107 -0.707107 -p 0 -0.382683 -0.92388 -p 0 0 -1 -p 0 0.382683 -0.92388 -p 0 0.707107 -0.707107 -p 0 0.92388 -0.382683 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 0 0.382683 -p -0.707107 0 0.707107 -p -0.382683 0 0.92388 -p 0 0 1 -p 0.382683 0 0.92388 -p 0.707107 0 0.707107 -p 0.92388 0 0.382683 -p 1 0 0 -p 0.92388 0 -0.382683 -p 0.707107 0 -0.707107 -p 0.382683 0 -0.92388 -p 0 0 -1 -p -0.382683 0 -0.92388 -p -0.707107 0 -0.707107 -p -0.92388 0 -0.382683 -p -1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52`;
    $spineCNT[$o]=$cnt;
}

//setup ikChestCNT
string $chestGRP=`createNode "transform" -n ($prefix+"chest_grp") -ss`;

parent $ikChestCNT $chestGRP;

delete `parentConstraint -weight 1 $ikChestJNT $chestGRP`;

parent $ikChestJNT $ikChestCNT;

string $chestMETA=`shadingNode -asUtility -n ("meta_"+$ikChestCNT) network`;

addAttr -ln "type" -dt "string" $chestMETA;
setAttr ($chestMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $chestMETA;
setAttr ($chestMETA+".component") -type "string" "chest";
addAttr -ln "system" -dt "string" $chestMETA;
setAttr ($chestMETA+".system") -type "string" "ik";
addAttr -ln "worldspace" -dt "string" $chestMETA;
setAttr ($chestMETA+".worldspace") -type "string" "false";
addAttr -ln "metaParent" -at message $chestMETA;
connectAttr -f ($module+".message") ($chestMETA+".metaParent");
addAttr -ln "metaParent" -at message $ikChestCNT;
connectAttr -f ($chestMETA+".message") ($ikChestCNT+".metaParent");

setAttr -lock true -keyable false -channelBox false ($ikChestCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($ikChestCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($ikChestCNT+".sz");

//setup ikHipCNT
string $ikHipGRP=`createNode "transform" -n ($prefix+"ikHip_grp") -ss`;

parent $ikHipCNT $ikHipGRP;

delete `parentConstraint -weight 1 $ikHipJNT $ikHipGRP`;

parent $ikHipJNT $ikHipCNT;

parent $ikJNTS[0] $ikHipJNT;

string $hipMETA=`shadingNode -asUtility -n ("meta_"+$ikHipCNT) network`;

addAttr -ln "type" -dt "string" $hipMETA;
setAttr ($hipMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $hipMETA;
setAttr ($hipMETA+".component") -type "string" "pelvis";
addAttr -ln "system" -dt "string" $hipMETA;
setAttr ($hipMETA+".system") -type "string" "ik";
addAttr -ln "worldspace" -dt "string" $hipMETA;
setAttr ($hipMETA+".worldspace") -type "string" "false";
addAttr -ln "metaParent" -at message $hipMETA;
connectAttr -f ($module+".message") ($hipMETA+".metaParent");
addAttr -ln "metaParent" -at message $ikHipCNT;
connectAttr -f ($hipMETA+".message") ($ikHipCNT+".metaParent");

setAttr -lock true -keyable false -channelBox false ($ikHipCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($ikHipCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($ikHipCNT+".sz");

//setup gutCNT
delete `parentConstraint -weight 1 $gutGRP $gutCNT`;
parent $gutCNT $gutGRP;

parent $gutJNT $gutCNT;

string $gutMETA=`shadingNode -asUtility -n ("meta_"+$gutCNT) network`;

addAttr -ln "type" -dt "string" $gutMETA;
setAttr ($gutMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $gutMETA;
setAttr ($gutMETA+".component") -type "string" "gut";
addAttr -ln "system" -dt "string" $gutMETA;
setAttr ($gutMETA+".system") -type "string" "ik";
addAttr -ln "worldspace" -dt "string" $gutMETA;
setAttr ($gutMETA+".worldspace") -type "string" "false";
addAttr -ln "metaParent" -at message $gutMETA;
connectAttr -f ($module+".message") ($gutMETA+".metaParent");
addAttr -ln "metaParent" -at message $gutCNT;
connectAttr -f ($gutMETA+".message") ($gutCNT+".metaParent");

setAttr -lock true -keyable false -channelBox false ($gutCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($gutCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($gutCNT+".sz");

//create zero controller
string $zeroGutGRP=`createNode "transform" -ss -n ($prefix+"zeroGut_grp")`;
delete `parentConstraint -weight 1 $gutGRP $zeroGutGRP`;
parent $zeroGutGRP $gutGRP;

//setup torsoCNT
string $torsoGRP=`createNode "transform" -n ($prefix+"torso_grp") -ss`;

parent $torsoCNT $torsoGRP;

delete `parentConstraint -weight 1 $ikHipJNT $torsoGRP`;

parent $ikHipGRP $torsoCNT;
parent $chestGRP $torsoCNT;
parent $torsoGRP $plug;

parent $fkGRPS[0] $torsoCNT;

rotate -r -os 0 0 90 ($torsoCNT+".cv[0:24]");

string $torsoMETA=`shadingNode -asUtility -n ("meta_"+$torsoCNT) network`;

addAttr -ln "type" -dt "string" $torsoMETA;
setAttr ($torsoMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $torsoMETA;
setAttr ($torsoMETA+".component") -type "string" "torso";
addAttr -ln "metaParent" -at message $torsoMETA;
connectAttr -f ($module+".message") ($torsoMETA+".metaParent");
addAttr -ln "metaParent" -at message $torsoCNT;
connectAttr -f ($torsoMETA+".message") ($torsoCNT+".metaParent");

setAttr -lock true -keyable false -channelBox false ($torsoCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($torsoCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($torsoCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($torsoCNT+".v");

//setup extraCNT
delete `parentConstraint -weight 1 $ikChestJNT $extraCNT`;

parent $extraCNT $jnts[$numSpineJNT];

rotate -r -os 90 0 0 ($extraCNT+".cv[0:11]");
rotate -r -os 0 180 0 ($extraCNT+".cv[0:11]");

addAttr -ln "fineTuneControl" -at "float" -min 0 -max 1 -k true $extraCNT;
addAttr -ln "squashStretch" -at "float" -min 0 -max 1 -k true $extraCNT;
addAttr -ln "FKIK" -at "float" -min 0 -max 1 -k true $extraCNT;
addAttr -ln "IKTwistControl" -at "float" -min 0 -max 1 -k true $extraCNT;
addAttr -ln "hipFollow" -at "float" -min 0 -max 1 -k true $extraCNT;

string $extraMETA=`shadingNode -asUtility -n ("meta_"+$extraCNT) network`;

addAttr -ln "type" -dt "string" $extraMETA;
setAttr ($extraMETA+".type") -type "string" "control";
addAttr -ln "component" -dt "string" $extraMETA;
setAttr ($extraMETA+".component") -type "string" "extra";
addAttr -ln "metaParent" -at message $extraMETA;
connectAttr -f ($module+".message") ($extraMETA+".metaParent");
addAttr -ln "metaParent" -at message $extraCNT;
connectAttr -f ($extraMETA+".message") ($extraCNT+".metaParent");

string $hipREV=`shadingNode -asUtility -n ($prefix+"hipREV") reverse`;
connectAttr -f ($extraCNT+".hipFollow") ($hipREV+".inputX");
connectAttr -f ($extraCNT+".hipFollow") ($hipParentCon[0]+"."+$jnts[0]+"W0");
connectAttr -f ($hipREV+".outputX") ($hipParentCon[0]+"."+$plug+"W1");

setAttr -lock true -keyable false -channelBox false ($extraCNT+".tx");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".ty");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".tz");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".rx");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".ry");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".rz");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".sx");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".sy");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".sz");
setAttr -lock true -keyable false -channelBox false ($extraCNT+".v");

//setup spineCNT
for($o = 0; $o < ($numSpineJNT-1); $o++)
{
    string $grp=`group -name ($prefix+($o+1)+"_grp") $spineCNT[$o]`;
    
    delete `parentConstraint $jnts[($o+1)] $grp`;
    
    parent $grp $posGRPS[($o+1)];
    
    parent $ikHandles[$o] $spineCNT[$o];
    
    connectAttr -f ($extraCNT+".fineTuneControl") ($spineCNT[$o]+".visibility");
    
    string $META=`shadingNode -asUtility -n ("meta_"+$spineCNT[$o]) network`;
    
    addAttr -ln "type" -dt "string" $META;
    setAttr ($META+".type") -type "string" "control";
    addAttr -ln "component" -dt "string" $META;
    setAttr ($META+".component") -type "string" "finetune";
    addAttr -ln "system" -dt "string" $META;
    setAttr ($META+".system") -type "string" "ik";
    addAttr -ln "worldspace" -dt "string" $META;
    setAttr ($META+".worldspace") -type "string" "false";
    addAttr -ln "metaParent" -at message $META;
    connectAttr -f ($module+".message") ($META+".metaParent");
    addAttr -ln "metaParent" -at message $spineCNT[$o];
    connectAttr -f ($META+".message") ($spineCNT[$o]+".metaParent");
    addAttr -ln "switch" -at message $META;
    connectAttr -f ($fkCNTS[$o+1]+".message") ($META+".switch");
    addAttr -ln "index" -at long $META;
    setAttr ($META+".index") ($o+1);
    
    setAttr -lock true -keyable false -channelBox false ($spineCNT[$o]+".rx");
    setAttr -lock true -keyable false -channelBox false ($spineCNT[$o]+".ry");
    setAttr -lock true -keyable false -channelBox false ($spineCNT[$o]+".rz");
    setAttr -lock true -keyable false -channelBox false ($spineCNT[$o]+".sx");
    setAttr -lock true -keyable false -channelBox false ($spineCNT[$o]+".sy");
    setAttr -lock true -keyable false -channelBox false ($spineCNT[$o]+".sz");
    setAttr -lock true -keyable false -channelBox false ($spineCNT[$o]+".v");
}

//create ik twist cnts and sockets
string $ikTwistCNTS[]={};
string $ikTwistGRPS[]={};
string $sockets[]={};
for($o = 0; $o < $numSpineJNT; $o++)
{
    //create twist control
    string $helper_loc[]=`circle -ch 0 -n ($prefix+"ikTwist"+$o+"_cnt")`;
    string $twistCNT=$helper_loc[0];
    
    delete `parentConstraint -weight 1 $ikJNTS[$o] $twistCNT`;
    
    parent $twistCNT $ikJNTS[$o];
    
    rotate -r -os 0 90 0 ($twistCNT+".cv[0:7]");
    
    connectAttr -f ($extraCNT+".IKTwistControl") ($twistCNT+".visibility");
    
    $ikTwistCNTS[$o]=$twistCNT;
    
    string $META=`shadingNode -asUtility -n ("meta_"+$twistCNT) network`;
    
    addAttr -ln "type" -dt "string" $META;
    setAttr ($META+".type") -type "string" "control";
    addAttr -ln "component" -dt "string" $META;
    setAttr ($META+".component") -type "string" "twist";
    addAttr -ln "system" -dt "string" $META;
    setAttr ($META+".system") -type "string" "ik";
    addAttr -ln "metaParent" -at message $META;
    connectAttr -f ($module+".message") ($META+".metaParent");
    addAttr -ln "metaParent" -at message $twistCNT;
    connectAttr -f ($META+".message") ($twistCNT+".metaParent");
    addAttr -ln "switch" -at message $META;
    connectAttr -f ($fkCNTS[$o]+".message") ($META+".switch");
    addAttr -ln "worldspace" -dt "string" $META;
    setAttr ($META+".worldspace") -type "string" "false";
    addAttr -ln "index" -at long $META;
    setAttr ($META+".index") ($o+1);
    
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".sx");
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".sy");
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".sz");
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".tx");
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".ty");
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".tz");
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".ry");
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".rz");
    setAttr -lock true -keyable false -channelBox false ($twistCNT+".v");
    
    //create twist grps
    string $grp=`createNode "transform" -n ($prefix+"ikTwist"+$o+"_grp") -ss`;
    
    parentConstraint -weight 1 $twistCNT $grp;
    
    $ikTwistGRPS[$o]=$grp;
    
    parent $grp $plug;
    
    //create sockets
    string $helper_loc[] = `spaceLocator -n ($prefix+$o+"_socket")`;
    string $socket=$helper_loc[0];
    
    delete `parentConstraint -weight 1 $jnts[$o+1] $socket`;
    parent $socket $jnts[$o+1];
    
    string $socketMETA=`shadingNode -asUtility -n ("meta_"+$socket) network`;
    addAttr -ln "type" -dt "string" $socketMETA;
    setAttr ($socketMETA+".type") -type "string" "socket";
    addAttr -ln "component" -dt "string" $socketMETA;
    setAttr ($socketMETA+".component") -type "string" "neck";
    addAttr -ln "metaParent" -at message $socketMETA;
    connectAttr -f ($module+".message") ($socketMETA+".metaParent");
    
    addAttr -ln "metaParent" -at message $socket;
    connectAttr -f ($socketMETA+".message") ($socket+".metaParent");
    
    $sockets[$o]=$socket;
}
for($o = 1; $o < $numSpineJNT; $o++)
{
    parent $ikTwistGRPS[$o] $ikTwistGRPS[$o-1];
}

parent $sockets[$numSpineJNT-1] $chestJNT;

//setup chest joint
pointConstraint $jnts[$numSpineJNT] $chestJNT;

//setup stretching----------------------------------------
string $ikMDS[]={};
string $ikBLEND[]={};

//setup first spine jnt
addAttr -ln "squashStretch" -at "float" $plug;
setKeyframe -at "squashStretch" -t 0 -v 0 $plug;
setKeyframe -at "squashStretch" -t  ($numSpineJNT+1) -v 0 $plug;
setKeyframe -at "squashStretch" -t  (($numSpineJNT+1)/2.0) -v 1 $plug;

keyTangent -wt 1 -at "squashStretch" $plug;
keyTangent -weightLock off -at "squashStretch" $plug;

string $spineStretch01DIST=`shadingNode -asUtility -n ($prefix+"spineStretch_dist") distanceBetween`;
string $spineStretch01BLEND=`shadingNode -asUtility -n ($prefix+"spineStretch_blend") blendColors`;
string $spineStretch01FC=`shadingNode -asUtility -n ($prefix+"spineStretch_fc") frameCache`;
string $spineStretch01MD01=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
string $spineStretch01MD02=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
string $spineStretch01MD03=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
string $spineStretch01MD04=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
string $spineStretch01MD05=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;

connectAttr -f ($ikHipJNT+".worldMatrix[0]") ($spineStretch01DIST+".inMatrix1");
connectAttr -f ($spineCNT[0]+".worldMatrix[0]") ($spineStretch01DIST+".inMatrix2");
setAttr ($spineStretch01MD01+".operation") 2;
connectAttr -f ($spineStretch01DIST+".distance") ($spineStretch01MD01+".input1X");
connectAttr -f ($plug+".sx") ($spineStretch01MD01+".input2X");

setAttr ($spineStretch01MD02+".operation") 2;
setAttr ($spineStretch01MD02+".input2X") `getAttr ($spineStretch01DIST+".distance")`;
connectAttr -f ($spineStretch01MD01+".outputX") ($spineStretch01MD02+".input1X");

setAttr ($spineStretch01BLEND+".color2R") 1;
connectAttr -f ($spineStretch01MD02+".outputX") ($spineStretch01BLEND+".color1R");
connectAttr -f ($extraCNT+".squashStretch") ($spineStretch01BLEND+".blender");

setAttr ($spineStretch01MD03+".operation") 3;
setAttr ($spineStretch01MD03+".input2X") 0.5;
connectAttr -f ($spineStretch01BLEND+".outputR") ($spineStretch01MD03+".input1X");

setAttr ($spineStretch01MD04+".operation") 2;
setAttr ($spineStretch01MD04+".input1X") 1;
connectAttr -f ($spineStretch01MD03+".outputX") ($spineStretch01MD04+".input2X");

setAttr ($spineStretch01FC+".varyTime") 1;
connectAttr -f ($plug+".squashStretch") ($spineStretch01FC+".stream");
setAttr ($spineStretch01MD05+".operation") 3;
connectAttr -f ($spineStretch01FC+".varying") ($spineStretch01MD05+".input2X");
connectAttr -f ($spineStretch01MD04+".outputX") ($spineStretch01MD05+".input1X");

connectAttr -f ($spineStretch01BLEND+".outputR") ($ikJNTS[0]+".sx");
connectAttr -f ($spineStretch01MD05+".outputX") ($ikJNTS[0]+".sy");
connectAttr -f ($spineStretch01MD05+".outputX") ($ikJNTS[0]+".sz");

$ikMDS[0]=$spineStretch01MD05;
$ikBLEND[0]=$spineStretch01BLEND;

//setup middle spine jnts
for($o = 1; $o < ($numSpineJNT-1); $o++)
{
    string $DIST=`shadingNode -asUtility -n ($prefix+"spineStretch_dist") distanceBetween`;
    string $BLEND=`shadingNode -asUtility -n ($prefix+"spineStretch_blend") blendColors`;
    string $FC=`shadingNode -asUtility -n ($prefix+"spineStretch_fc") frameCache`;
    string $MD01=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
    string $MD02=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
    string $MD03=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
    string $MD04=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
    string $MD05=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
    
    connectAttr -f ($spineCNT[$o-1]+".worldMatrix[0]") ($DIST+".inMatrix1");
    connectAttr -f ($spineCNT[$o]+".worldMatrix[0]") ($DIST+".inMatrix2");
    
    setAttr ($MD01+".operation") 2;
    connectAttr -f ($DIST+".distance") ($MD01+".input1X");
    connectAttr -f ($plug+".sx") ($MD01+".input2X");
    
    setAttr ($MD02+".operation") 2;
    setAttr ($MD02+".input2X") `getAttr ($DIST+".distance")`;
    connectAttr -f ($MD01+".outputX") ($MD02+".input1X");
    
    setAttr ($BLEND+".color2R") 1;
    connectAttr -f ($MD02+".outputX") ($BLEND+".color1R");
    connectAttr -f ($extraCNT+".squashStretch") ($BLEND+".blender");
    
    setAttr ($MD03+".operation") 3;
    setAttr ($MD03+".input2X") 0.5;
    connectAttr -f ($BLEND+".outputR") ($MD03+".input1X");
    
    setAttr ($MD04+".operation") 2;
    setAttr ($MD04+".input1X") 1;
    connectAttr -f ($MD03+".outputX") ($MD04+".input2X");
    
    setAttr ($FC+".varyTime") ($o+1);
    connectAttr -f ($plug+".squashStretch") ($FC+".stream");
    setAttr ($MD05+".operation") 3;
    connectAttr -f ($FC+".varying") ($MD05+".input2X");
    connectAttr -f ($MD04+".outputX") ($MD05+".input1X");
    
    connectAttr -f ($BLEND+".outputR") ($ikJNTS[$o]+".sx");
    connectAttr -f ($MD05+".outputX") ($ikJNTS[$o]+".sy");
    connectAttr -f ($MD05+".outputX") ($ikJNTS[$o]+".sz");
    
    $ikMDS[$o]=$MD05;
    
    $ikBLEND[$o]=$BLEND;
}

//setup last spine jnt
string $spineStretchDIST=`shadingNode -asUtility -n ($prefix+"spineStretch_dist") distanceBetween`;
string $spineStretchBLEND=`shadingNode -asUtility -n ($prefix+"spineStretch_blend") blendColors`;
string $spineStretchFC=`shadingNode -asUtility -n ($prefix+"spineStretch_fc") frameCache`;
string $spineStretchMD01=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
string $spineStretchMD02=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
string $spineStretchMD03=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
string $spineStretchMD04=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;
string $spineStretchMD05=`shadingNode -asUtility -n ($prefix+"spineStretch_md") multiplyDivide`;

connectAttr -f ($spineCNT[$numSpineJNT-2]+".worldMatrix[0]") ($spineStretchDIST+".inMatrix1");
connectAttr -f ($ikChestJNT+".worldMatrix[0]") ($spineStretchDIST+".inMatrix2");

setAttr ($spineStretchMD01+".operation") 2;
connectAttr -f ($spineStretchDIST+".distance") ($spineStretchMD01+".input1X");
connectAttr -f ($plug+".sx") ($spineStretchMD01+".input2X");

setAttr ($spineStretchMD02+".operation") 2;
setAttr ($spineStretchMD02+".input2X") `getAttr ($spineStretchDIST+".distance")`;
connectAttr -f ($spineStretchMD01+".outputX") ($spineStretchMD02+".input1X");

setAttr ($spineStretchBLEND+".color2R") 1;
connectAttr -f ($spineStretchMD02+".outputX") ($spineStretchBLEND+".color1R");
connectAttr -f ($extraCNT+".squashStretch") ($spineStretchBLEND+".blender");

setAttr ($spineStretchMD03+".operation") 3;
setAttr ($spineStretchMD03+".input2X") 0.5;
connectAttr -f ($spineStretchBLEND+".outputR") ($spineStretchMD03+".input1X");
setAttr ($spineStretchMD04+".operation") 2;
setAttr ($spineStretchMD04+".input1X") 1;
connectAttr -f ($spineStretchMD03+".outputX") ($spineStretchMD04+".input2X");

setAttr ($spineStretchFC+".varyTime") $numSpineJNT;
connectAttr -f ($plug+".squashStretch") ($spineStretchFC+".stream");
setAttr ($spineStretchMD05+".operation") 3;
connectAttr -f ($spineStretchFC+".varying") ($spineStretchMD05+".input2X");
connectAttr -f ($spineStretchMD04+".outputX") ($spineStretchMD05+".input1X");

connectAttr -f ($spineStretchBLEND+".outputR") ($ikJNTS[$numSpineJNT-1]+".sx");
connectAttr -f ($spineStretchMD05+".outputX") ($ikJNTS[$numSpineJNT-1]+".sy");
connectAttr -f ($spineStretchMD05+".outputX") ($ikJNTS[$numSpineJNT-1]+".sz");

$ikMDS[$numSpineJNT-1]=$spineStretchMD05;

$ikBLEND[$numSpineJNT-1]=$spineStretchBLEND;

//setup BLENDING-----------------------------------------------------------------
string $fkikREV=`shadingNode -asUtility -n ($prefix+"fkikREV") reverse`;

connectAttr ($extraCNT+".FKIK") ($fkikREV+".inputX");

for($o = 0; $o < $numSpineJNT; $o++)
{
    string $orientCon[]=`orientConstraint -weight 1 -offset 0 0 0 $ikTwistGRPS[$o] $fkCNTS[$o] $jnts[$o]`;
    
    connectAttr -f ($fkikREV+".outputX") ($orientCon[0]+"."+$fkCNTS[$o]+"W1");
    connectAttr -f ($extraCNT+".FKIK") ($orientCon[0]+"."+$ikTwistGRPS[$o]+"W0");
    
    //scale blending
    string $fkik1Blend=`shadingNode -asUtility -n ($prefix+"fkik1"+$o+"_blend") blendColors`;
    string $stretch1Blend=`shadingNode -asUtility -n ($prefix+"stretch1"+$o+"_blend") blendColors`;
    
    setAttr ($fkik1Blend+".color2R") 1;
    connectAttr -f ($extraCNT+".FKIK") ($fkik1Blend+".blender");
    connectAttr -f ($ikBLEND[$o]+".outputR") ($fkik1Blend+".color1R");
    
    setAttr ($stretch1Blend+".color2R") 1;
    connectAttr -f ($extraCNT+".squashStretch") ($stretch1Blend+".blender");
    connectAttr -f ($fkik1Blend+".outputR") ($stretch1Blend+".color1R");
    connectAttr -f ($stretch1Blend+".outputR") ($jnts[$o]+".sx");
    
    string $fkik2Blend=`shadingNode -asUtility -n ($prefix+"fkik2"+$o+"_blend") blendColors`;
    string $stretch2Blend=`shadingNode -asUtility -n ($prefix+"stretch2"+$o+"_blend") blendColors`;
    
    setAttr ($fkik2Blend+".color2R") 1;
    connectAttr -f ($extraCNT+".FKIK") ($fkik2Blend+".blender");
    connectAttr -f ($ikMDS[$o]+".outputX") ($fkik2Blend+".color1R");
    
    setAttr ($stretch2Blend+".color2R") 1;
    connectAttr -f ($extraCNT+".squashStretch") ($stretch2Blend+".blender");
    connectAttr -f ($fkik2Blend+".outputR") ($stretch2Blend+".color1R");
    connectAttr -f ($stretch2Blend+".outputR") ($jnts[$o]+".sy");
    connectAttr -f ($stretch2Blend+".outputR") ($jnts[$o]+".sz");
}

string $pCon[]=`parentConstraint -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 $ikChestCNT $fkCNTS[$numSpineJNT] $chestJNT`;

connectAttr -f ($fkikREV+".outputX") ($pCon[0]+"."+$fkCNTS[size($fkCNTS)-1]+"W1");
connectAttr -f ($extraCNT+".FKIK") ($pCon[0]+"."+$ikChestCNT+"W0");

string $orientCon[]=`orientConstraint -weight 1 -offset 0 0 0 $ikChestJNT $fkCNTS[size($fkCNTS)-1] $jnts[size($jnts)-1]`;

connectAttr -f ($fkikREV+".outputX") ($orientCon[0]+"."+$fkCNTS[size($fkCNTS)-1]+"W1");
connectAttr -f ($extraCNT+".FKIK") ($orientCon[0]+"."+$ikChestJNT+"W0");

string $pCon[]=`pointConstraint -weight 1 -offset 0 0 0 $ikHipJNT $fkCNTS[0] $jnts[0]`;

connectAttr -f ($fkikREV+".outputX") ($pCon[0]+"."+$fkCNTS[0]+"W1");
connectAttr -f ($extraCNT+".FKIK") ($pCon[0]+"."+$ikHipJNT+"W0");

connectAttr -f ($extraCNT+".FKIK") ($ikChestCNT+".visibility");
connectAttr -f ($extraCNT+".FKIK") ($ikHipCNT+".visibility");
connectAttr -f ($extraCNT+".FKIK") ($gutCNT+".visibility");

setAttr -lock true -keyable false -channelBox false ($ikChestCNT+".v");
setAttr -lock true -keyable false -channelBox false ($ikHipCNT+".v");
setAttr -lock true -keyable false -channelBox false ($gutCNT+".v");

for($o = 0; $o < ($numSpineJNT+1); $o++)
{
    connectAttr -f ($fkikREV+".outputX") ($fkCNTS[$o]+".visibility");
    
    setAttr -lock true -keyable false -channelBox false ($fkCNTS[$o]+".v");
}

//adding switch to fk system
for($o = 0; $o < ($numSpineJNT+1); $o++)
{
    addAttr -ln "switch" -at message $fkMETAS[$o];
    connectAttr -f ($ikTwistCNTS[$o]+".message") ($fkMETAS[$o]+".switch");
}

connectAttr -f ($ikChestCNT+".message") ($fkMETAS[size($fkMETAS)-1]+".switch");

//adding switch to ik system
addAttr -ln "switch" -at message $chestMETA;
connectAttr -f ($fkCNTS[$numSpineJNT]+".message") ($chestMETA+".switch");

addAttr -ln "switch" -at message $hipMETA;
connectAttr -f ($fkCNTS[0]+".message") ($hipMETA+".switch");

addAttr -ln "switch" -at message $gutMETA;
connectAttr -f ($zeroGutGRP+".message") ($gutMETA+".switch");

//exposing translations attrs of first fk controller
setAttr -lock false -channelBox true ($fkCNTS[0]+".tx");
setAttr -lock false -channelBox true ($fkCNTS[0]+".ty");
setAttr -lock false -channelBox true ($fkCNTS[0]+".tz");

setAttr -keyable true ($fkCNTS[0]+".tx");
setAttr -keyable true ($fkCNTS[0]+".ty");
setAttr -keyable true ($fkCNTS[0]+".tz");